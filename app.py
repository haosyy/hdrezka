from flask import Flask, request, jsonify, render_template_string
from flask_cors import CORS
from flask_socketio import SocketIO, emit, join_room, leave_room
import json
import traceback
import os
import sys
from time import time
from HdRezkaApi import HdRezkaApi

# –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app, origins=[
    "https://discord.com",
    "https://*.discord.com",
    "https://discordapp.com",
    "https://*.discordapp.com"
])

# SocketIO –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
socketio = SocketIO(app, cors_allowed_origins="*")

# –ü—Ä–æ—Å—Ç–∏–π –∫–µ—à –≤ –ø–∞–º'—è—Ç—ñ. –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Redis –∞–±–æ Memcached.
# –ö–ª—é—á - URL, –∑–Ω–∞—á–µ–Ω–Ω—è - —Å–ª–æ–≤–Ω–∏–∫ –∑ –¥–∞–Ω–∏–º–∏ —Ç–∞ —á–∞—Å–æ–º –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.
CACHE = {}
CACHE_TIMEOUT_SECONDS = 3600 # 1 –≥–æ–¥–∏–Ω–∞

# Watch Together —Å–∏—Å—Ç–µ–º–∞
WATCH_ROOMS = {}  # –ö—ñ–º–Ω–∞—Ç–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
ROOM_TIMEOUT = 3600  # 1 –≥–æ–¥–∏–Ω–∞ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ

# SocketIO –∫—ñ–º–Ω–∞—Ç–∏
SOCKET_ROOMS = {}  # –ö—ñ–º–Ω–∞—Ç–∏ –¥–ª—è SocketIO —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó

# HTML —à–∞–±–ª–æ–Ω (–≤–±—É–¥–æ–≤–∞–Ω–∏–π –≤ –∫–æ–¥)
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HdRezka API Test</title>
    
    <!-- Discord Activities –º–µ—Ç–∞-—Ç–µ–≥–∏ -->
    <meta property="og:title" content="HdRezka - –°–ø—ñ–ª—å–Ω–∏–π –ø–µ—Ä–µ–≥–ª—è–¥">
    <meta property="og:description" content="–î–∏–≤—ñ—Ç—å—Å—è —Ñ—ñ–ª—å–º–∏ —Ç–∞ —Å–µ—Ä—ñ–∞–ª–∏ —Ä–∞–∑–æ–º –∑ –¥—Ä—É–∑—è–º–∏">
    <meta property="og:type" content="website">
    
    <!-- Discord –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ —Ü–µ–π CSP —Å–≤–æ—ó–º -->
    <meta http-equiv="Content-Security-Policy" content="default-src * 'unsafe-inline' 'unsafe-eval' data: blob:;">
    
    <!-- Crossorigin –¥–ª—è –≤—ñ–¥–µ–æ -->
    <script>
        // –î–æ–¥–∞—î–º–æ crossorigin="anonymous" –¥–æ –≤—Å—ñ—Ö –≤—ñ–¥–µ–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        document.addEventListener('DOMContentLoaded', function() {
            const videos = document.querySelectorAll('video');
            videos.forEach(video => {
                video.setAttribute('crossorigin', 'anonymous');
                console.log('‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ crossorigin –¥–ª—è –≤—ñ–¥–µ–æ');
            });
        });
    </script>
    
    <script>
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Discord SDK
        function checkDiscordSDK() {
            return new Promise((resolve, reject) => {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π Discord SDK
                if (typeof DiscordSDK !== 'undefined') {
                    console.log('Discord SDK –¥–æ—Å—Ç—É–ø–Ω–∏–π');
                    resolve();
                    return;
                }
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–∏ –≤ Discord Activities
                if (window.location.hostname.includes('discordsays.com')) {
                    console.log('–í Discord Activities - —á–µ–∫–∞—î–º–æ SDK...');
                    // –ß–µ–∫–∞—î–º–æ —Ç—Ä–æ—Ö–∏ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è SDK
                    setTimeout(() => {
                        if (typeof DiscordSDK !== 'undefined') {
                            console.log('Discord SDK –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø—ñ—Å–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è');
                            resolve();
                        } else {
                            console.log('Discord SDK –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –≤ Discord Activities - –ø—Ä–∞—Ü—é—î–º–æ –±–µ–∑ SDK');
                            // –í Discord Activities –Ω–∞–≤—ñ—Ç—å –±–µ–∑ SDK
                            resolve();
                        }
                    }, 3000);
                } else {
                    console.log('–ù–µ –≤ Discord Activities - –ø—Ä–∞—Ü—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ');
                    reject(new Error('–ù–µ –≤ Discord Activities'));
                }
            });
        }
    </script>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background: #f5f5f5;
        }
        .container {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        h2 {
            color: #333;
            border-bottom: 2px solid #4CAF50;
            padding-bottom: 10px;
        }
        input, select, button {
            width: 100%;
            padding: 10px;
            margin: 5px 0;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }
        button {
            background: #4CAF50;
            color: white;
            cursor: pointer;
            font-size: 16px;
            border: none;
            outline: none;
            user-select: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            touch-action: manipulation;
        }
        button:hover {
            background: #45a049;
        }
        button:active {
            background: #3d8b40;
            transform: translateY(1px);
        }
        button:disabled {
            background: #ccc;
            cursor: not-allowed;
        }
        button:focus {
            outline: 2px solid #4CAF50;
            outline-offset: 2px;
        }
        .result {
            background: #f9f9f9;
            border: 1px solid #ddd;
            padding: 15px;
            border-radius: 4px;
            margin-top: 10px;
            white-space: pre-wrap;
            font-family: monospace;
            max-height: 400px;
            overflow-y: auto;
        }
        .error {
            background: #ffebee;
            border-color: #f44336;
            color: #d32f2f;
        }
        .success {
            background: #e8f5e8;
            border-color: #4CAF50;
            color: #2e7d32;
        }
        .loading {
            color: #ff9800;
        }
        .form-group {
            margin-bottom: 15px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        #seasonEpisodeControls {
            display: none;
        }
        
        /* –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å—Ç–∏–ª—ñ –¥–ª—è Discord Activities */
        button:focus-visible {
            outline: 2px solid #4CAF50;
            outline-offset: 2px;
        }
        
        button:not(:disabled):hover {
            box-shadow: 0 2px 8px rgba(76, 175, 80, 0.3);
        }
        
        button:not(:disabled):active {
            box-shadow: 0 1px 4px rgba(76, 175, 80, 0.3);
        }
        
        /* –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –¥–ª—è input –ø–æ–ª—ñ–≤ */
        input:focus, select:focus {
            outline: 2px solid #4CAF50;
            outline-offset: 2px;
            border-color: #4CAF50;
        }
        
        /* –ê–Ω—ñ–º–∞—Ü—ñ—ó –¥–ª—è –∫—Ä–∞—â–æ–≥–æ UX */
        .result {
            transition: all 0.3s ease;
        }
        
        .container {
            transition: all 0.3s ease;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>üé¨ HdRezka API Tester</h2>
        <div id="modeIndicator" style="background: #e3f2fd; border: 1px solid #2196f3; padding: 10px; border-radius: 4px; margin-bottom: 20px; text-align: center;">
            <span id="modeText">üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∂–∏–º—É —Ä–æ–±–æ—Ç–∏...</span>
        </div>
        
        <div class="form-group">
            <label for="url">URL —Å–∞–π—Ç—É:</label>
            <input type="url" id="url" placeholder="https://hdrezka.ag/..." 
                   value="https://hdrezka.me/animation/adventures/31356-arifureta-silneyshiy-remeslennik-v-mire-tv-1-2019.html#t:111-s:1-e:3">
        </div>

        <button data-action="parse">üì• –ü–∞—Ä—Å–∏—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç</button>
        <button data-action="test" style="background: #2196F3; margin-left: 10px;">üß™ –¢–µ—Å—Ç API</button>
        <button data-action="domains" style="background: #FF9800; margin-left: 10px;">üåê –¢–µ—Å—Ç –¥–æ–º–µ–Ω—ñ–≤</button>
        <button data-action="debug" style="background: #9C27B0; margin-left: 10px;">üîç Debug</button>
        <button data-action="routes" style="background: #607D8B; margin-left: 10px;">üõ£Ô∏è –ú–∞—Ä—à—Ä—É—Ç–∏</button>
        <div id="parseResult" class="result" style="display: none;"></div>
    </div>

    <div class="container" id="streamContainer" style="display: none;">
        <h2>üé• –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç—Ä—ñ–º</h2>
        
        <div class="form-group">
            <label for="translation">–ü–µ—Ä–µ–∫–ª–∞–¥:</label>
            <select id="translation"></select>
        </div>

        <div id="seasonEpisodeControls">
            <div class="form-group">
                <label for="season">–°–µ–∑–æ–Ω:</label>
                <select id="season"></select>
            </div>

            <div class="form-group">
                <label for="episode">–°–µ—Ä—ñ—è:</label>
                <select id="episode"></select>
            </div>
        </div>

        <button data-action="stream">üé¨ –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç—Ä—ñ–º</button>
        <button data-action="stream-test" style="background: #E91E63; margin-left: 10px;">üß™ –¢–µ—Å—Ç —Å—Ç—Ä—ñ–º—É</button>
        <button data-action="test-video" style="background: #FF5722; margin-left: 10px;">üé• –¢–µ—Å—Ç –≤—ñ–¥–µ–æ</button>
        <button data-action="test-hdrezka" style="background: #9C27B0; margin-left: 10px;">üîç –¢–µ—Å—Ç HdRezka</button>
        <button data-action="test-direct" style="background: #4CAF50; margin-left: 10px;">üöÄ –ü—Ä—è–º—ñ –≤—ñ–¥–µ–æ</button>
        <button data-action="test-blob" style="background: #FF9800; margin-left: 10px;">üíæ –¢–µ—Å—Ç Blob</button>
        
        <!-- Watch Together –∫–Ω–æ–ø–∫–∏ -->
        <div style="margin-top: 20px; padding: 15px; background: #2C2F33; border-radius: 8px; border: 2px solid #5865F2;">
            <h3 style="color: #5865F2; margin-top: 0;">üë• Watch Together</h3>
            <p style="color: #B9BBBE; font-size: 14px; margin-bottom: 15px;">
                –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–π—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥ –∑ –¥—Ä—É–∑—è–º–∏! –í—ñ–¥–∫—Ä–∏–π—Ç–µ –≤—ñ–¥–µ–æ –Ω–∞ —Å–≤–æ—î–º—É –ø—Ä–∏—Å—Ç—Ä–æ—ó, –∞ Discord –±—É–¥–µ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –ø–∞—É–∑–∏ —Ç–∞ —á–∞—Å.
            </p>
            <button data-action="create-room" style="background: #5865F2; margin-right: 10px;">üè† –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É</button>
            <button data-action="join-room" style="background: #57F287; margin-right: 10px;">üö™ –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è</button>
            <button data-action="list-rooms" style="background: #FEE75C; color: #000; margin-right: 10px;">üìã –°–ø–∏—Å–æ–∫ –∫—ñ–º–Ω–∞—Ç</button>
            <a href="/controller" target="_blank" style="background: #FF6B6B; color: white; text-decoration: none; padding: 15px 30px; border-radius: 5px; display: inline-block; margin: 5px;">üéÆ –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä</a>
        </div>
        <div id="streamResult" class="result" style="display: none;"></div>
        
        <div id="videoContainer" style="display: none; margin-top: 20px;">
            <h3>üì∫ –í—ñ–¥–µ–æ –ø–ª–µ—î—Ä</h3>
            <div class="form-group">
                <label for="qualitySelect">–Ø–∫—ñ—Å—Ç—å –≤—ñ–¥–µ–æ:</label>
                <select id="qualitySelect" onchange="changeVideoQuality()"></select>
            </div>
            <video id="videoPlayer" 
                   controls 
                   crossorigin="anonymous"
                   preload="metadata"
                   style="width: 100%; max-width: 800px; height: auto;">
                –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –≤—ñ–¥–µ–æ
            </video>
            <div id="videoInfo" style="margin-top: 10px; font-size: 14px; color: #666;"></div>
        </div>
    </div>

    <script>
        // Discord Activities SDK —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
        let discordSDK;
        
        async function initializeDiscordSDK() {
            const modeIndicator = document.getElementById('modeIndicator');
            const modeText = document.getElementById('modeText');
            
            try {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Discord SDK
                await checkDiscordSDK();
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π DiscordSDK
                if (typeof DiscordSDK !== 'undefined') {
                    discordSDK = new DiscordSDK('1382172131051307038');
                    
                    const { code } = await discordSDK.commands.authorize({
                        client_id: '1382172131051307038',
                        response_type: 'code',
                        state: '',
                        prompt: 'none',
                        scope: ['identify', 'guilds']
                    });
                    
                    console.log('Discord SDK —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
                    document.title = 'HdRezka - Discord Activity';
                    
                    modeIndicator.style.background = '#e8f5e8';
                    modeIndicator.style.borderColor = '#4caf50';
                    modeText.innerHTML = 'üéÆ Discord Activities —Ä–µ–∂–∏–º - –ø—Ä–∞—Ü—é—î–º–æ –≤ Discord!';
                } else {
                    console.log('Discord SDK –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π - –ø—Ä–∞—Ü—é—î–º–æ –≤ Discord Activities –±–µ–∑ SDK');
                    document.title = 'HdRezka - Discord Activity';
                    
                    modeIndicator.style.background = '#e8f5e8';
                    modeIndicator.style.borderColor = '#4caf50';
                    modeText.innerHTML = 'üéÆ Discord Activities —Ä–µ–∂–∏–º - –ø—Ä–∞—Ü—é—î–º–æ –≤ Discord!';
                }
                
            } catch (error) {
                console.log('Discord SDK –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π (–∑–∞–ø—É—Å–∫ –ø–æ–∑–∞ Discord):', error?.message || error);
                
                modeIndicator.style.background = '#fff3e0';
                modeIndicator.style.borderColor = '#ff9800';
                modeText.innerHTML = 'üåê –õ–æ–∫–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º - –ø—Ä–∞—Ü—é—î–º–æ —è–∫ –∑–≤–∏—á–∞–π–Ω–∏–π —Å–∞–π—Ç';
            }
        }
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Discord SDK –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        window.addEventListener('load', initializeDiscordSDK);
        
        // –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è Discord Activities
        document.addEventListener('DOMContentLoaded', function() {
            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≤—Å—ñ—Ö –∫–Ω–æ–ø–æ–∫
            const buttons = document.querySelectorAll('button');
            buttons.forEach(button => {
                // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è Discord Activities
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    // –î–æ–¥–∞—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω–∏–π —Ñ—ñ–¥–±–µ–∫
                    this.style.transform = 'scale(0.95)';
                    setTimeout(() => {
                        this.style.transform = '';
                    }, 150);
                    
                    // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∫–Ω–æ–ø–∫–∏
                    const onclick = this.getAttribute('onclick');
                    const dataAction = this.getAttribute('data-action');
                    
                    if (onclick) {
                        try {
                            eval(onclick);
                        } catch (error) {
                            console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è onclick:', error);
                        }
                    } else if (dataAction) {
                        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Å–ø–æ—Å—ñ–± —á–µ—Ä–µ–∑ data-action
                        try {
                            switch(dataAction) {
                                case 'parse':
                                    parseContent();
                                    break;
                                case 'test':
                                    testAPI();
                                    break;
                                case 'domains':
                                    testDomains();
                                    break;
                                case 'stream':
                                    getStream();
                                    break;
                                case 'debug':
                                    debugInfo();
                                    break;
                                case 'routes':
                                    listRoutes();
                                    break;
                                case 'stream-test':
                                    testStream();
                                    break;
                                case 'test-video':
                                    testVideo();
                                    break;
                                case 'test-hdrezka':
                                    testHdRezka();
                                    break;
                                case 'test-direct':
                                    testDirect();
                                    break;
                                case 'test-blob':
                                    testBlob();
                                    break;
                                case 'create-room':
                                    createWatchRoom();
                                    break;
                                case 'join-room':
                                    joinWatchRoom();
                                    break;
                                case 'list-rooms':
                                    listWatchRooms();
                                    break;
                                default:
                                    console.log('–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è:', dataAction);
                            }
                        } catch (error) {
                            console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è data-action:', error);
                        }
                    }
                });
                
                // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
                button.addEventListener('keydown', function(e) {
                    if (e.key === 'Enter' || e.key === ' ') {
                        e.preventDefault();
                        this.click();
                    }
                });
            });
            
            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è input –ø–æ–ª—ñ–≤
            const inputs = document.querySelectorAll('input, select');
            inputs.forEach(input => {
                input.addEventListener('keydown', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        // –®—É–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø—ñ—Å–ª—è –ø–æ–ª—è
                        const nextButton = this.parentElement.querySelector('button');
                        if (nextButton) {
                            nextButton.click();
                        }
                    }
                });
            });
        });
        
        const API_BASE = '/api';
        let currentData = null;
        let currentStreamData = null;

        const urlInput = document.getElementById('url');
        const parseResultDiv = document.getElementById('parseResult');
        const streamContainerDiv = document.getElementById('streamContainer');
        const translationSelect = document.getElementById('translation');
        const seasonSelect = document.getElementById('season');
        const episodeSelect = document.getElementById('episode');
        const streamResultDiv = document.getElementById('streamResult');
        const videoContainerDiv = document.getElementById('videoContainer');
        const qualitySelect = document.getElementById('qualitySelect');
        const videoPlayer = document.getElementById('videoPlayer');
        const videoInfoDiv = document.getElementById('videoInfo');
        const seasonEpisodeControls = document.getElementById('seasonEpisodeControls');

        function showResult(element, data, isError = false) {
            element.style.display = 'block';
            element.className = `result ${isError ? 'error' : 'success'}`;
            element.textContent = typeof data === 'string' ? data : JSON.stringify(data, null, 2);
        }

        function showLoading(element, message = '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...') {
            element.style.display = 'block';
            element.className = 'result loading';
            element.textContent = message;
        }

        async function parseContent() {
            const url = urlInput.value;
            if (!url) {
                alert('–í–≤–µ–¥—ñ—Ç—å URL!');
                return;
            }

            showLoading(parseResultDiv, '–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç—É...');
            streamContainerDiv.style.display = 'none';
            videoContainerDiv.style.display = 'none';
            
            try {
                const response = await fetch(`${API_BASE}/parse`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ url })
                });

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —î JSON
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    const text = await response.text();
                    console.error('–ù–µ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å:', text);
                    throw new Error(`–°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ JSON –¥–∞–Ω—ñ. –°—Ç–∞—Ç—É—Å: ${response.status}`);
                }

                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.error || '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É');
                }

                currentData = data;
                showResult(parseResultDiv, data);
                
                // –û–Ω–æ–≤–ª—é—î–º–æ Discord –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
                updateDiscordActivity(data.name || '–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç', '–ü–µ—Ä–µ–≥–ª—è–¥–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç');
                
                fillTranslations(data.translations);

                if (data.type === 'video.tv_series') {
                    seasonEpisodeControls.style.display = 'block';
                    fillSeasonsAndEpisodes(data);
                } else {
                    seasonEpisodeControls.style.display = 'none';
                }
                
                streamContainerDiv.style.display = 'block';
                
            } catch (error) {
                showResult(parseResultDiv, `–ü–æ–º–∏–ª–∫–∞: ${error.message}`, true);
            }
        }

        function fillTranslations(translations) {
            translationSelect.innerHTML = '';
            for (const [name, id] of Object.entries(translations)) {
                const option = document.createElement('option');
                option.value = id;
                option.textContent = name;
                translationSelect.appendChild(option);
            }
        }

        function fillSeasonsAndEpisodes(data) {
            seasonSelect.innerHTML = '';
            episodeSelect.innerHTML = '';

            const selectedTranslatorId = translationSelect.value;
            const translatorName = Object.keys(data.translations).find(key => data.translations[key] === selectedTranslatorId);
            
            if (translatorName && data.seasons && data.seasons[translatorName]) {
                const seasonsInfoForTranslator = data.seasons[translatorName];
                
                for (const [id, name] of Object.entries(seasonsInfoForTranslator.seasons)) {
                    const option = document.createElement('option');
                    option.value = id;
                    option.textContent = name;
                    seasonSelect.appendChild(option);
                }
                
                if (Object.keys(seasonsInfoForTranslator.seasons).length > 0) {
                    const firstSeasonId = Object.keys(seasonsInfoForTranslator.seasons)[0];
                    fillEpisodes(firstSeasonId);
                }
            }
        }

        function fillEpisodes(seasonId) {
            episodeSelect.innerHTML = '';
            
            if (!currentData || !currentData.seasons) return;
            
            const selectedTranslatorId = translationSelect.value;
            const translatorName = Object.keys(currentData.translations).find(key => currentData.translations[key] === selectedTranslatorId);

            if (translatorName && currentData.seasons[translatorName] && 
                currentData.seasons[translatorName].episodes && 
                currentData.seasons[translatorName].episodes[seasonId]) {
                
                const episodes = currentData.seasons[translatorName].episodes[seasonId];
                for (const [id, name] of Object.entries(episodes)) {
                    const option = document.createElement('option');
                    option.value = id;
                    option.textContent = name;
                    episodeSelect.appendChild(option);
                }
            }
        }

        translationSelect.addEventListener('change', function() {
            if (currentData && currentData.type === 'video.tv_series') {
                fillSeasonsAndEpisodes(currentData);
            }
        });

        seasonSelect.addEventListener('change', function() {
            fillEpisodes(this.value);
        });

        async function getStream() {
            const url = urlInput.value;
            const translation = translationSelect.value;
            let season = null;
            let episode = null;

            if (!url || !translation) {
                alert('–°–ø–æ—á–∞—Ç–∫—É –ø–∞—Ä—Å—ñ—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–∞ –≤–∏–±–µ—Ä—ñ—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥!');
                return;
            }

            if (currentData && currentData.type === 'video.tv_series') {
                season = seasonSelect.value;
                episode = episodeSelect.value;
                if (!season || !episode) {
                    alert('–î–ª—è —Å–µ—Ä—ñ–∞–ª—É –≤–∏–±–µ—Ä—ñ—Ç—å —Å–µ–∑–æ–Ω —ñ —Å–µ—Ä—ñ—é!');
                    return;
                }
            }

            showLoading(streamResultDiv, '–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç—Ä—ñ–º—É...');
            videoContainerDiv.style.display = 'none';
            
            try {
                const requestData = { url, translation };
                if (season) requestData.season = season;
                if (episode) requestData.episode = episode;

                const response = await fetch(`${API_BASE}/stream`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(requestData)
                });

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —î JSON
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    const text = await response.text();
                    console.error('–ù–µ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è stream:', text);
                    throw new Error(`–°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ JSON –¥–∞–Ω—ñ. –°—Ç–∞—Ç—É—Å: ${response.status}`);
                }

                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.error || '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç—Ä—ñ–º—É');
                }

                currentStreamData = data;
                showResult(streamResultDiv, data);
                
                if (data.videos && Object.keys(data.videos).length > 0) {
                    showVideoPlayer(data.videos);
                } else {
                    showResult(streamResultDiv, '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤—ñ–¥–µ–æ–ø–æ—Ç–æ–∫—ñ–≤.', true);
                }
                
            } catch (error) {
                showResult(streamResultDiv, `–ü–æ–º–∏–ª–∫–∞: ${error.message}`, true);
            }
        }

        function showVideoPlayer(videos) {
            console.log('=== showVideoPlayer –≤–∏–∫–ª–∏–∫–∞–Ω–æ ===');
            console.log('–í—ñ–¥–µ–æ:', videos);
            
            const qualities = Object.keys(videos).sort((a, b) => {
                const aNum = parseInt(a);
                const bNum = parseInt(b);
                return bNum - aNum;
            });
            
            qualitySelect.innerHTML = '';
            qualities.forEach(quality => {
                const option = document.createElement('option');
                option.value = quality;
                option.textContent = quality;
                qualitySelect.appendChild(option);
            });
            
            if (qualities.length > 0) {
                const bestQuality = qualities[0];
                qualitySelect.value = bestQuality;
                
                console.log(`–í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–µ–æ —è–∫–æ—Å—Ç—ñ ${bestQuality}`);
                console.log(`URL: ${videos[bestQuality]}`);
                
                // –í–ê–ñ–õ–ò–í–û: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—ñ–¥–µ–æ —Ç–∞ —Å—Ç–≤–æ—Ä—é—î–º–æ Blob URL
                loadVideoAsBlob(videos[bestQuality], bestQuality);
            }
            
            videoContainerDiv.style.display = 'block';
            console.log('‚úÖ –í—ñ–¥–µ–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–∫–∞–∑–∞–Ω–æ');
        }
        
        // –ù–û–í–ê —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ —è–∫ Blob
        async function loadVideoAsBlob(videoUrl, quality) {
            try {
                console.log(`üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ —è–∫ Blob: ${videoUrl}`);
                
                // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                videoInfoDiv.innerHTML = '‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ...';
                
                // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—ñ–¥–µ–æ
                const response = await fetch(videoUrl);
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                console.log('‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–æ');
                console.log('Content-Type:', response.headers.get('content-type'));
                console.log('Content-Length:', response.headers.get('content-length'));
                
                // –û—Ç—Ä–∏–º—É—î–º–æ —è–∫ blob –∑ –ø—Ä–æ–≥—Ä–µ—Å–æ–º
                const contentLength = response.headers.get('content-length');
                const total = parseInt(contentLength, 10);
                let loaded = 0;
                
                const reader = response.body.getReader();
                const chunks = [];
                
                while (true) {
                    const { done, value } = await reader.read();
                    
                    if (done) break;
                    
                    chunks.push(value);
                    loaded += value.length;
                    
                    // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
                    if (total) {
                        const percent = ((loaded / total) * 100).toFixed(1);
                        videoInfoDiv.innerHTML = `‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${percent}% (${(loaded / 1024 / 1024).toFixed(1)} MB / ${(total / 1024 / 1024).toFixed(1)} MB)`;
                    } else {
                        videoInfoDiv.innerHTML = `‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${(loaded / 1024 / 1024).toFixed(1)} MB`;
                    }
                }
                
                console.log('‚úÖ –í—ñ–¥–µ–æ –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
                
                // –°—Ç–≤–æ—Ä—é—î–º–æ Blob
                const blob = new Blob(chunks, { type: 'video/mp4' });
                const blobUrl = URL.createObjectURL(blob);
                
                console.log('‚úÖ Blob URL —Å—Ç–≤–æ—Ä–µ–Ω–æ:', blobUrl);
                
                // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ Blob URL –¥–ª—è –≤—ñ–¥–µ–æ
                videoPlayer.src = blobUrl;
                
                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ Blob URL –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –ø—ñ–∑–Ω—ñ—à–µ
                if (window.currentBlobUrl) {
                    URL.revokeObjectURL(window.currentBlobUrl);
                }
                window.currentBlobUrl = blobUrl;
                
                // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
                videoPlayer.onerror = function(e) {
                    console.error('‚ùå –ü–û–ú–ò–õ–ö–ê –í–Ü–î–ï–û:', e);
                    console.error('Error code:', videoPlayer.error?.code);
                    console.error('Error message:', videoPlayer.error?.message);
                    
                    videoInfoDiv.innerHTML = `
                        <span style="color: red; font-weight: bold;">
                            ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–µ–æ
                            <br>–ö–æ–¥: ${videoPlayer.error?.code}
                        </span>
                    `;
                };
                
                videoPlayer.onloadedmetadata = function() {
                    console.log('‚úÖ –ú–µ—Ç–∞–¥–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
                    console.log('Duration:', videoPlayer.duration);
                    updateVideoInfo(quality, videoUrl);
                };
                
                videoPlayer.oncanplay = function() {
                    console.log('‚úÖ –í—ñ–¥–µ–æ –≥–æ—Ç–æ–≤–µ –¥–æ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è');
                };
                
                videoPlayer.load();
                
            } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Blob:', error);
                videoInfoDiv.innerHTML = `
                    <span style="color: red; font-weight: bold;">
                        ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ${error.message}
                    </span>
                `;
            }
        }

        function changeVideoQuality() {
            const selectedQuality = qualitySelect.value;
            
            if (currentStreamData && currentStreamData.videos[selectedQuality]) {
                const currentTime = videoPlayer.currentTime;
                
                // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–æ–≤—É —è–∫—ñ—Å—Ç—å —è–∫ Blob
                loadVideoAsBlob(currentStreamData.videos[selectedQuality], selectedQuality)
                    .then(() => {
                        // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é
                videoPlayer.currentTime = currentTime;
                videoPlayer.play();
                    });
            }
        }

        function updateVideoInfo(quality, url) {
            const urlShort = url.length > 100 ? url.substring(0, 100) + '...' : url;
            
            let seasonEpisode = '';
            if (currentStreamData.season && currentStreamData.episode) {
                seasonEpisode = `–°–µ–∑–æ–Ω ${currentStreamData.season}, –°–µ—Ä—ñ—è ${currentStreamData.episode} | `;
            }
            
            videoInfoDiv.innerHTML = `
                <strong>–Ø–∫—ñ—Å—Ç—å:</strong> ${quality} | 
                ${seasonEpisode}
                <strong>URL:</strong> <a href="${url}" target="_blank" style="color: #4CAF50;">${urlShort}</a>
            `;
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å Discord Activities
            updateDiscordActivity(currentData?.name || '–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç', '–î–∏–≤–∏—Ç—å—Å—è –≤—ñ–¥–µ–æ');
        }
        
        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É Discord Activities
        async function updateDiscordActivity(details, state) {
            if (discordSDK) {
                try {
                    let activity = {
                        details: details,
                        state: state,
                        assets: {
                            large_image: 'hdrezka_logo',
                            large_text: 'HdRezka - –°–ø—ñ–ª—å–Ω–∏–π –ø–µ—Ä–µ–≥–ª—è–¥'
                        },
                        timestamps: {
                            start: Math.floor(Date.now() / 1000)
                        }
                    };
                    
                    // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ Watch Together
                    if (currentRoomId) {
                        if (isHost) {
                            activity.details = `üëë –•–æ—Å—Ç –∫—ñ–º–Ω–∞—Ç–∏: ${details}`;
                            activity.state = `–ö—ñ–º–Ω–∞—Ç–∞: ${currentRoomId} | ${state}`;
                            activity.assets.small_image = 'crown';
                            activity.assets.small_text = '–•–æ—Å—Ç –∫—ñ–º–Ω–∞—Ç–∏';
                        } else {
                            activity.details = `üë• –ì—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç–∏: ${details}`;
                            activity.state = `–ö—ñ–º–Ω–∞—Ç–∞: ${currentRoomId} | –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ —Ö–æ—Å—Ç–æ–º`;
                            activity.assets.small_image = 'users';
                            activity.assets.small_text = '–ì—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç–∏';
                        }
                    }
                    
                    await discordSDK.commands.setActivity({
                        activity: activity
                    });
                    
                    console.log('‚úÖ Discord Activity –æ–Ω–æ–≤–ª–µ–Ω–æ');
                } catch (error) {
                    console.log('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Discord –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:', error);
                }
            }
        }
        
        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è Discord –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        async function clearDiscordActivity() {
            if (discordSDK) {
                try {
                    await discordSDK.commands.setActivity({
                        activity: null
                    });
                } catch (error) {
                    console.log('–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è Discord –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:', error);
                }
            }
        }
        
        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API
        async function testAPI() {
            const parseResultDiv = document.getElementById('parseResult');
            showLoading(parseResultDiv, '–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API...');
            
            try {
                const response = await fetch(`${API_BASE}/test`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ test: 'data' })
                });
                
                console.log('–¢–µ—Å—Ç API - —Å—Ç–∞—Ç—É—Å:', response.status);
                console.log('–¢–µ—Å—Ç API - –∑–∞–≥–æ–ª–æ–≤–∫–∏:', response.headers);
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —î JSON
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    const text = await response.text();
                    console.error('API –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ JSON:', text);
                    showResult(parseResultDiv, `API –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ JSON –¥–∞–Ω—ñ:\n${text}`, true);
                    return;
                }
                
                const data = await response.json();
                showResult(parseResultDiv, data);
                
                console.log('API —Ç–µ—Å—Ç —É—Å–ø—ñ—à–Ω–∏–π:', data);
                
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É API:', error);
                showResult(parseResultDiv, `–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É API: ${error.message}`, true);
            }
        }
        
        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ–º–µ–Ω—ñ–≤ HdRezka
        async function testDomains() {
            const parseResultDiv = document.getElementById('parseResult');
            showLoading(parseResultDiv, '–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ–º–µ–Ω—ñ–≤ HdRezka...');
            
            const domains = [
                'https://rezka.ag',
                'https://hdrezka.ag', 
                'https://hdrezka.me',
                'https://hdrezka.ua'
            ];
            
            const results = [];
            
            for (const domain of domains) {
                try {
                    console.log(`–¢–µ—Å—Ç—É—î–º–æ –¥–æ–º–µ–Ω: ${domain}`);
                    const response = await fetch(domain, {
                        method: 'HEAD',
                        mode: 'no-cors',
                        timeout: 5000
                    });
                    
                    results.push({
                        domain: domain,
                        status: 'success',
                        message: '–î–æ—Å—Ç—É–ø–Ω–∏–π'
                    });
                    
                } catch (error) {
                    console.log(`–î–æ–º–µ–Ω ${domain} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π:`, error);
                    results.push({
                        domain: domain,
                        status: 'error',
                        message: error.message
                    });
                }
            }
            
            showResult(parseResultDiv, {
                message: '–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ–º–µ–Ω—ñ–≤',
                results: results,
                timestamp: new Date().toISOString()
            });
        }
        
        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        async function debugInfo() {
            const parseResultDiv = document.getElementById('parseResult');
            showLoading(parseResultDiv, '–û—Ç—Ä–∏–º–∞–Ω–Ω—è debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó...');
            
            try {
                const response = await fetch(`${API_BASE}/debug`, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                console.log('Debug - —Å—Ç–∞—Ç—É—Å:', response.status);
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —î JSON
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    const text = await response.text();
                    console.error('Debug –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ JSON:', text);
                    showResult(parseResultDiv, `Debug –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ JSON –¥–∞–Ω—ñ:\n${text}`, true);
                    return;
                }
                
                const data = await response.json();
                showResult(parseResultDiv, data);
                
                console.log('Debug —É—Å–ø—ñ—à–Ω–∏–π:', data);
                
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ debug:', error);
                showResult(parseResultDiv, `–ü–æ–º–∏–ª–∫–∞ debug: ${error.message}`, true);
            }
        }
        
        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–∞—Ä—à—Ä—É—Ç—ñ–≤
        async function listRoutes() {
            const parseResultDiv = document.getElementById('parseResult');
            showLoading(parseResultDiv, '–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –º–∞—Ä—à—Ä—É—Ç—ñ–≤...');
            
            try {
                const response = await fetch(`${API_BASE}/routes`, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                console.log('Routes - —Å—Ç–∞—Ç—É—Å:', response.status);
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —î JSON
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    const text = await response.text();
                    console.error('Routes –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ JSON:', text);
                    showResult(parseResultDiv, `Routes –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ JSON –¥–∞–Ω—ñ:\n${text}`, true);
                    return;
                }
                
                const data = await response.json();
                showResult(parseResultDiv, data);
                
                console.log('Routes —É—Å–ø—ñ—à–Ω–∏–π:', data);
                
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ routes:', error);
                showResult(parseResultDiv, `–ü–æ–º–∏–ª–∫–∞ routes: ${error.message}`, true);
            }
        }
        
        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä—ñ–º—É
        async function testStream() {
            const streamResultDiv = document.getElementById('streamResult');
            showLoading(streamResultDiv, '–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä—ñ–º—É...');
            
            try {
                const testData = {
                    url: 'https://example.com/test',
                    translation: '1',
                    season: '1',
                    episode: '1'
                };
                
                const response = await fetch(`${API_BASE}/stream-test`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(testData)
                });
                
                console.log('Stream test - —Å—Ç–∞—Ç—É—Å:', response.status);
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —î JSON
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    const text = await response.text();
                    console.error('Stream test –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ JSON:', text);
                    showResult(streamResultDiv, `Stream test –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ JSON –¥–∞–Ω—ñ:\n${text}`, true);
                    return;
                }
                
                const data = await response.json();
                showResult(streamResultDiv, data);
                
                console.log('Stream test —É—Å–ø—ñ—à–Ω–∏–π:', data);
                
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ stream test:', error);
                showResult(streamResultDiv, `–ü–æ–º–∏–ª–∫–∞ stream test: ${error.message}`, true);
            }
        }
        
        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–µ–æ
        async function testVideo() {
            const streamResultDiv = document.getElementById('streamResult');
            showLoading(streamResultDiv, '–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–µ–æ...');
            
            try {
                const response = await fetch(`${API_BASE}/test-video`, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                console.log('Video test - —Å—Ç–∞—Ç—É—Å:', response.status);
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —î JSON
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    const text = await response.text();
                    console.error('Video test –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ JSON:', text);
                    showResult(streamResultDiv, `Video test –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ JSON –¥–∞–Ω—ñ:\n${text}`, true);
                    return;
                }
                
                const data = await response.json();
                showResult(streamResultDiv, data);
                
                console.log('Video test —É—Å–ø—ñ—à–Ω–∏–π:', data);
                
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ video test:', error);
                showResult(streamResultDiv, `–ü–æ–º–∏–ª–∫–∞ video test: ${error.message}`, true);
            }
        }
        
        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è HdRezka
        async function testHdRezka() {
            const streamResultDiv = document.getElementById('streamResult');
            showLoading(streamResultDiv, '–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è HdRezka...');
            
            try {
                const response = await fetch(`${API_BASE}/test-hdrezka`, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                console.log('HdRezka test - —Å—Ç–∞—Ç—É—Å:', response.status);
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —î JSON
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    const text = await response.text();
                    console.error('HdRezka test –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ JSON:', text);
                    showResult(streamResultDiv, `HdRezka test –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ JSON –¥–∞–Ω—ñ:\n${text}`, true);
                    return;
                }
                
                const data = await response.json();
                showResult(streamResultDiv, data);
                
                console.log('HdRezka test —É—Å–ø—ñ—à–Ω–∏–π:', data);
                
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ HdRezka test:', error);
                showResult(streamResultDiv, `–ü–æ–º–∏–ª–∫–∞ HdRezka test: ${error.message}`, true);
            }
        }
        
        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä—è–º–∏—Ö –≤—ñ–¥–µ–æ
        async function testDirect() {
            const streamResultDiv = document.getElementById('streamResult');
            showLoading(streamResultDiv, '–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä—è–º–∏—Ö –≤—ñ–¥–µ–æ...');
            
            try {
                const response = await fetch(`${API_BASE}/test-direct`, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                console.log('Direct test - —Å—Ç–∞—Ç—É—Å:', response.status);
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —î JSON
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    const text = await response.text();
                    console.error('Direct test –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ JSON:', text);
                    showResult(streamResultDiv, `Direct test –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ JSON –¥–∞–Ω—ñ:\n${text}`, true);
                    return;
                }
                
                const data = await response.json();
                showResult(streamResultDiv, data);
                
                console.log('Direct test —É—Å–ø—ñ—à–Ω–∏–π:', data);
                
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ Direct test:', error);
                showResult(streamResultDiv, `–ü–æ–º–∏–ª–∫–∞ Direct test: ${error.message}`, true);
            }
        }
        
        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Blob
        async function testBlob() {
            const streamResultDiv = document.getElementById('streamResult');
            showLoading(streamResultDiv, '–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Blob...');
            
            try {
                const response = await fetch(`${API_BASE}/test-blob`, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                console.log('Blob test - —Å—Ç–∞—Ç—É—Å:', response.status);
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —î JSON
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    const text = await response.text();
                    console.error('Blob test –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ JSON:', text);
                    showResult(streamResultDiv, `Blob test –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ JSON –¥–∞–Ω—ñ:\n${text}`, true);
                    return;
                }
                
                const data = await response.json();
                showResult(streamResultDiv, data);
                
                console.log('Blob test —É—Å–ø—ñ—à–Ω–∏–π:', data);
                
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ Blob test:', error);
                showResult(streamResultDiv, `–ü–æ–º–∏–ª–∫–∞ Blob test: ${error.message}`, true);
            }
        }
        
        // ===== WATCH TOGETHER –°–ò–°–¢–ï–ú–ê =====
        
        let currentRoomId = null;
        let isHost = false;
        let syncInterval = null;
        
        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç–∏
        async function createWatchRoom() {
            const streamResultDiv = document.getElementById('streamResult');
            showLoading(streamResultDiv, '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç–∏...');
            
            try {
                if (!currentStreamData || !currentStreamData.videos) {
                    showResult(streamResultDiv, '–°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º–∞–π—Ç–µ —Å—Ç—Ä—ñ–º!', true);
                    return;
                }
                
                const videoUrl = Object.values(currentStreamData.videos)[0];
                const videoTitle = document.getElementById('url').value || '–ù–µ–≤—ñ–¥–æ–º–µ –≤—ñ–¥–µ–æ';
                
                const response = await fetch(`${API_BASE}/watch/create-room`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        host_id: 'user_' + Math.random().toString(36).substr(2, 9),
                        video_url: videoUrl,
                        video_title: videoTitle
                    })
                });
                
                const data = await response.json();
                
                if (data.status === 'success') {
                    currentRoomId = data.room_id;
                    isHost = true;
                    
                    showResult(streamResultDiv, {
                        message: '‚úÖ –ö—ñ–º–Ω–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞!',
                        room_id: data.room_id,
                        video_title: data.video_title,
                        instructions: [
                            '1. –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –∫–æ–¥–æ–º –∫—ñ–º–Ω–∞—Ç–∏ –∑ –¥—Ä—É–∑—è–º–∏',
                            '2. –í—ñ–¥–∫—Ä–∏–π—Ç–µ –≤—ñ–¥–µ–æ –Ω–∞ —Å–≤–æ—î–º—É –ø—Ä–∏—Å—Ç—Ä–æ—ó',
                            '3. Discord –±—É–¥–µ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–≥–ª—è–¥',
                            '4. –í–∏ - —Ö–æ—Å—Ç, –≤–∏ –∫–æ–Ω—Ç—Ä–æ–ª—é—î—Ç–µ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è'
                        ]
                    });
                    
                    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
                    startSync();
                    
                    console.log('üè† –ö—ñ–º–Ω–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞:', data.room_id);
                } else {
                    showResult(streamResultDiv, `–ü–æ–º–∏–ª–∫–∞: ${data.error}`, true);
                }
                
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç–∏:', error);
                showResult(streamResultDiv, `–ü–æ–º–∏–ª–∫–∞: ${error.message}`, true);
            }
        }
        
        // –ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏
        async function joinWatchRoom() {
            const roomId = prompt('–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∫—ñ–º–Ω–∞—Ç–∏:');
            if (!roomId) return;
            
            const streamResultDiv = document.getElementById('streamResult');
            showLoading(streamResultDiv, '–ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏...');
            
            try {
                const response = await fetch(`${API_BASE}/watch/join-room/${roomId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        user_id: 'user_' + Math.random().toString(36).substr(2, 9)
                    })
                });
                
                const data = await response.json();
                
                if (data.status === 'success') {
                    currentRoomId = roomId;
                    isHost = false;
                    
                    showResult(streamResultDiv, {
                        message: '‚úÖ –ü—Ä–∏—î–¥–Ω–∞–Ω–æ –¥–æ –∫—ñ–º–Ω–∞—Ç–∏!',
                        room_id: data.room_id,
                        video_title: data.video_title,
                        video_url: data.video_url,
                        viewers_count: data.viewers_count,
                        instructions: [
                            '1. –í—ñ–¥–∫—Ä–∏–π—Ç–µ –≤—ñ–¥–µ–æ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –≤–∏—â–µ',
                            '2. Discord –±—É–¥–µ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –∑ —Ö–æ—Å—Ç–æ–º',
                            '3. –í–∏ - –≥—ñ—Å—Ç—å, —Å–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ —Ö–æ—Å—Ç–æ–º'
                        ]
                    });
                    
                    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é
                    startSync();
                    
                    console.log('üö™ –ü—Ä–∏—î–¥–Ω–∞–Ω–æ –¥–æ –∫—ñ–º–Ω–∞—Ç–∏:', roomId);
                } else {
                    showResult(streamResultDiv, `–ü–æ–º–∏–ª–∫–∞: ${data.error}`, true);
                }
                
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è:', error);
                showResult(streamResultDiv, `–ü–æ–º–∏–ª–∫–∞: ${error.message}`, true);
            }
        }
        
        // –°–ø–∏—Å–æ–∫ –∫—ñ–º–Ω–∞—Ç
        async function listWatchRooms() {
            const streamResultDiv = document.getElementById('streamResult');
            showLoading(streamResultDiv, '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç...');
            
            try {
                const response = await fetch(`${API_BASE}/watch/rooms`);
                const data = await response.json();
                
                if (data.status === 'success') {
                    showResult(streamResultDiv, {
                        message: `–ó–Ω–∞–π–¥–µ–Ω–æ ${data.total} –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫—ñ–º–Ω–∞—Ç`,
                        rooms: data.rooms,
                        instructions: [
                            '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "üö™ –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è" —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∫—ñ–º–Ω–∞—Ç–∏',
                            '–ê–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤—É –∫—ñ–º–Ω–∞—Ç—É –∫–Ω–æ–ø–∫–æ—é "üè† –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É"'
                        ]
                    });
                } else {
                    showResult(streamResultDiv, `–ü–æ–º–∏–ª–∫–∞: ${data.error}`, true);
                }
                
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ —Å–ø–∏—Å–∫—É –∫—ñ–º–Ω–∞—Ç:', error);
                showResult(streamResultDiv, `–ü–æ–º–∏–ª–∫–∞: ${error.message}`, true);
            }
        }
        
        // –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
        function startSync() {
            if (syncInterval) {
                clearInterval(syncInterval);
            }
            
            syncInterval = setInterval(async () => {
                if (!currentRoomId) return;
                
                try {
                    if (isHost) {
                        // –•–æ—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å—Ç–∞–Ω
                        if (videoPlayer && !videoPlayer.paused) {
                            await syncRoomState(videoPlayer.paused, videoPlayer.currentTime);
                        }
                    } else {
                        // –ì—ñ—Å—Ç—å –æ—Ç—Ä–∏–º—É—î —Å—Ç–∞–Ω
                        const response = await fetch(`${API_BASE}/watch/room/${currentRoomId}`);
                        const data = await response.json();
                        
                        if (data.status === 'success' && videoPlayer) {
                            // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –∑ —Ö–æ—Å—Ç–æ–º
                            const timeDiff = Math.abs(videoPlayer.currentTime - data.current_time);
                            
                            if (timeDiff > 2) { // –Ø–∫—â–æ —Ä—ñ–∑–Ω–∏—Ü—è –±—ñ–ª—å—à–µ 2 —Å–µ–∫—É–Ω–¥
                                videoPlayer.currentTime = data.current_time;
                                console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è: ${data.current_time.toFixed(1)}s`);
                            }
                            
                            if (videoPlayer.paused !== !data.is_playing) {
                                if (data.is_playing) {
                                    videoPlayer.play().catch(e => console.log('–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ'));
                                } else {
                                    videoPlayer.pause();
                                }
                                console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è: ${data.is_playing ? 'play' : 'pause'}`);
                            }
                        }
                    }
                } catch (error) {
                    console.error('–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:', error);
                }
            }, 1000); // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∫–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É
            
            console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–ø—É—â–µ–Ω–∞');
        }
        
        // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞–Ω—É –∫—ñ–º–Ω–∞—Ç–∏
        async function syncRoomState(isPlaying, currentTime) {
            if (!currentRoomId || !isHost) return;
            
            try {
                await fetch(`${API_BASE}/watch/sync/${currentRoomId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        user_id: 'host',
                        is_playing: !isPlaying,
                        current_time: currentTime
                    })
                });
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞–Ω—É:', error);
            }
        }
        
        // –û—á–∏—â–µ–Ω–Ω—è Blob URLs –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ
        window.addEventListener('beforeunload', function() {
            if (window.currentBlobUrl) {
                URL.revokeObjectURL(window.currentBlobUrl);
                console.log('üßπ Blob URL –æ—á–∏—â–µ–Ω–æ');
            }
            
            if (syncInterval) {
                clearInterval(syncInterval);
                console.log('üõë –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑—É–ø–∏–Ω–µ–Ω–∞');
            }
        });
    </script>
</body>
</html>
"""

# ===== HTML –î–õ–Ø DISCORD ACTIVITY (–ö–û–ù–¢–†–û–õ–ï–†) =====
CONTROLLER_TEMPLATE = """
<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Watch Together - Controller</title>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            margin: 0;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
        }
        h1 {
            text-align: center;
            font-size: 2em;
            margin-bottom: 30px;
        }
        .status {
            background: rgba(255,255,255,0.1);
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
        }
        .controls {
            background: rgba(255,255,255,0.1);
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        }
        button {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 15px 30px;
            margin: 5px;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s;
        }
        button:hover {
            background: #45a049;
            transform: translateY(-2px);
        }
        button:active {
            transform: translateY(0);
        }
        button.pause {
            background: #ff9800;
        }
        button.pause:hover {
            background: #e68900;
        }
        .video-input {
            width: 100%;
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            border: none;
            font-size: 14px;
        }
        .player-link {
            background: rgba(76, 175, 80, 0.2);
            border: 2px solid #4CAF50;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            margin: 20px 0;
        }
        .player-link a {
            color: #4CAF50;
            font-size: 1.2em;
            font-weight: bold;
            text-decoration: none;
        }
        .users {
            background: rgba(255,255,255,0.1);
            padding: 15px;
            border-radius: 10px;
            margin-top: 20px;
        }
        .user {
            display: inline-block;
            background: rgba(255,255,255,0.2);
            padding: 5px 10px;
            margin: 5px;
            border-radius: 15px;
        }
        .seek-controls {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }
        .seek-input {
            flex: 1;
            padding: 10px;
            border-radius: 5px;
            border: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üé¨ Watch Together</h1>
        
        <div class="status">
            <h3>üìä –°—Ç–∞—Ç—É—Å</h3>
            <div id="roomInfo">–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...</div>
            <div id="videoInfo">–í—ñ–¥–µ–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ</div>
        </div>

        <div class="player-link">
            <h3>üé• –í—ñ–¥–∫—Ä–∏–π—Ç–µ –ø–ª–µ—î—Ä</h3>
            <a href="#" id="playerLink" target="_blank">
                –í—ñ–¥–∫—Ä–∏—Ç–∏ –≤—ñ–¥–µ–æ –ø–ª–µ—î—Ä –≤ –Ω–æ–≤–æ–º—É –≤—ñ–∫–Ω—ñ ‚Üí
            </a>
            <p style="color: rgba(255,255,255,0.7); margin-top: 10px;">
                –í—ñ–¥–µ–æ –±—É–¥–µ –≤—ñ–¥—Ç–≤–æ—Ä—é–≤–∞—Ç–∏—Å—å –≤ –æ–∫—Ä–µ–º–æ–º—É –≤—ñ–∫–Ω—ñ, –∞ —Ç—É—Ç –≤–∏ –∑–º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ –Ω–∏–º
            </p>
        </div>

        <div class="controls">
            <h3>üéÆ –ö–µ—Ä—É–≤–∞–Ω–Ω—è</h3>
            
            <div>
                <input type="text" 
                       id="videoUrl" 
                       class="video-input" 
                       placeholder="–í—Å—Ç–∞–≤—Ç–µ URL –∑ HdRezka...">
                <button onclick="parseVideo()">üì• –ü–∞—Ä—Å–∏—Ç–∏ –≤—ñ–¥–µ–æ</button>
            </div>

            <div id="translationControls" style="display: none; margin-top: 15px;">
                <select id="translationSelect" class="video-input"></select>
                <div id="seasonEpisode" style="display: none;">
                    <select id="seasonSelect" class="video-input"></select>
                    <select id="episodeSelect" class="video-input"></select>
                </div>
                <button onclick="loadVideo()">‚ñ∂Ô∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–µ–æ</button>
            </div>

            <div id="playbackControls" style="display: none; margin-top: 15px;">
                <button onclick="sendPlay()">‚ñ∂Ô∏è Play</button>
                <button class="pause" onclick="sendPause()">‚è∏Ô∏è Pause</button>
                
                <div class="seek-controls">
                    <input type="number" 
                           id="seekTime" 
                           class="seek-input" 
                           placeholder="–ß–∞—Å (—Å–µ–∫—É–Ω–¥–∏)" 
                           min="0">
                    <button onclick="sendSeek()">‚è© –ü–µ—Ä–µ–º–æ—Ç–∞—Ç–∏</button>
                </div>
            </div>
        </div>

        <div class="users">
            <h3>üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –≤ –∫—ñ–º–Ω–∞—Ç—ñ (<span id="userCount">0</span>)</h3>
            <div id="userList"></div>
        </div>
    </div>

    <script>
        const socket = io();
        const roomId = 'room_' + Math.random().toString(36).substr(2, 9);
        let currentVideoData = null;
        let parsedContent = null;

        // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏
        socket.on('connect', () => {
            console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ —Å–µ—Ä–≤–µ—Ä–∞');
            socket.emit('join_room', { room: roomId });
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–ª–µ—î—Ä
            const playerUrl = window.location.origin + '/player.html?room=' + roomId;
            document.getElementById('playerLink').href = playerUrl;
        });

        socket.on('room_joined', (data) => {
            console.log('‚úÖ –ü—Ä–∏—î–¥–Ω–∞–Ω–æ –¥–æ –∫—ñ–º–Ω–∞—Ç–∏:', data);
            document.getElementById('roomInfo').innerHTML = 
                'üè† –ö—ñ–º–Ω–∞—Ç–∞: <strong>' + roomId + '</strong><br>' +
                'üë• –£—á–∞—Å–Ω–∏–∫—ñ–≤: <strong>' + data.user_count + '</strong>';
        });

        socket.on('user_joined', (data) => {
            console.log('üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è:', data);
            updateUsers(data.users);
        });

        socket.on('user_left', (data) => {
            console.log('üëã –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–π—à–æ–≤:', data);
            updateUsers(data.users);
        });

        function updateUsers(users) {
            const count = users.length;
            document.getElementById('userCount').textContent = count;
            
            const userList = document.getElementById('userList');
            userList.innerHTML = users.map(user => 
                '<span class="user">üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á #' + user.substr(-4) + '</span>'
            ).join('');
        }

        // –ü–∞—Ä—Å–∏–Ω–≥ –≤—ñ–¥–µ–æ
        async function parseVideo() {
            const url = document.getElementById('videoUrl').value;
            if (!url) {
                alert('–í–≤–µ–¥—ñ—Ç—å URL!');
                return;
            }

            try {
                const response = await fetch('/api/parse', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ url })
                });

                const data = await response.json();
                console.log('–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', data);
                
                parsedContent = data;
                
                // –ü–æ–∫–∞–∑—É—î–º–æ –≤–∏–±—ñ—Ä –ø–µ—Ä–µ–∫–ª–∞–¥—É
                const translationSelect = document.getElementById('translationSelect');
                translationSelect.innerHTML = '';
                
                for (const [name, id] of Object.entries(data.translations)) {
                    const option = document.createElement('option');
                    option.value = id;
                    option.textContent = name;
                    translationSelect.appendChild(option);
                }
                
                // –ü–æ–∫–∞–∑—É—î–º–æ —Å–µ–∑–æ–Ω–∏ —è–∫—â–æ —Å–µ—Ä—ñ–∞–ª
                if (data.type === 'video.tv_series' && data.seasons) {
                    document.getElementById('seasonEpisode').style.display = 'block';
                    fillSeasons(data);
                }
                
                document.getElementById('translationControls').style.display = 'block';
                
            } catch (error) {
                alert('–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É: ' + error.message);
            }
        }

        function fillSeasons(data) {
            const translationId = document.getElementById('translationSelect').value;
            const translatorName = Object.keys(data.translations)
                .find(key => data.translations[key] === translationId);
            
            if (!translatorName || !data.seasons || !data.seasons[translatorName]) return;
            
            const seasons = data.seasons[translatorName].seasons;
            const seasonSelect = document.getElementById('seasonSelect');
            
            seasonSelect.innerHTML = '';
            for (const [id, name] of Object.entries(seasons)) {
                const option = document.createElement('option');
                option.value = id;
                option.textContent = name;
                seasonSelect.appendChild(option);
            }
            
            fillEpisodes(data);
        }

        function fillEpisodes(data) {
            const translationId = document.getElementById('translationSelect').value;
            const seasonId = document.getElementById('seasonSelect').value;
            
            const translatorName = Object.keys(data.translations)
                .find(key => data.translations[key] === translationId);
            
            if (!translatorName || !data.seasons || !data.seasons[translatorName]) return;
            
            const episodes = data.seasons[translatorName].episodes[seasonId];
            const episodeSelect = document.getElementById('episodeSelect');
            
            episodeSelect.innerHTML = '';
            for (const [id, name] of Object.entries(episodes)) {
                const option = document.createElement('option');
                option.value = id;
                option.textContent = name;
                episodeSelect.appendChild(option);
            }
        }

        // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ
        async function loadVideo() {
            const url = document.getElementById('videoUrl').value;
            const translation = document.getElementById('translationSelect').value;
            
            let season = null;
            let episode = null;
            
            if (parsedContent && parsedContent.type === 'video.tv_series') {
                season = document.getElementById('seasonSelect').value;
                episode = document.getElementById('episodeSelect').value;
            }

            try {
                const response = await fetch('/api/stream', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ url, translation, season, episode })
                });

                const data = await response.json();
                console.log('Stream —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', data);
                
                currentVideoData = data;
                
                // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤—Å—ñ–º –≤ –∫—ñ–º–Ω–∞—Ç—ñ
                socket.emit('load_video', {
                    room: roomId,
                    videoData: data
                });
                
                document.getElementById('videoInfo').innerHTML = 
                    'üé¨ –í—ñ–¥–µ–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ<br>' +
                    '–Ø–∫–æ—Å—Ç–µ–π: <strong>' + Object.keys(data.videos).length + '</strong>';
                
                document.getElementById('playbackControls').style.display = 'block';
                
            } catch (error) {
                alert('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ' + error.message);
            }
        }

        // –ö–µ—Ä—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è–º
        function sendPlay() {
            socket.emit('control', {
                room: roomId,
                action: 'play'
            });
        }

        function sendPause() {
            socket.emit('control', {
                room: roomId,
                action: 'pause'
            });
        }

        function sendSeek() {
            const time = parseFloat(document.getElementById('seekTime').value);
            if (isNaN(time)) {
                alert('–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —á–∞—Å!');
                return;
            }
            
            socket.emit('control', {
                room: roomId,
                action: 'seek',
                time: time
            });
        }
    </script>
</body>
</html>
"""

# ===== HTML –î–õ–Ø –í–Ü–î–ï–û –ü–õ–ï–Ñ–†–ê (–û–ö–†–ï–ú–ï –í–Ü–ö–ù–û) =====
PLAYER_TEMPLATE = """
<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Watch Together - Player</title>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
    <style>
        body {
            margin: 0;
            padding: 0;
            background: #000;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            overflow: hidden;
        }
        #videoContainer {
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }
        video {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
        }
        #status {
            position: absolute;
            top: 20px;
            left: 20px;
            background: rgba(0,0,0,0.7);
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            font-family: Arial, sans-serif;
        }
        #quality {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(0,0,0,0.7);
            color: white;
            padding: 10px;
            border-radius: 5px;
            font-family: Arial, sans-serif;
        }
        select {
            background: rgba(255,255,255,0.1);
            color: white;
            border: none;
            padding: 5px;
            border-radius: 3px;
        }
        #message {
            color: white;
            font-size: 1.5em;
            text-align: center;
            padding: 40px;
        }
    </style>
</head>
<body>
    <div id="status">–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...</div>
    <div id="quality" style="display: none;">
        –Ø–∫—ñ—Å—Ç—å: 
        <select id="qualitySelect" onchange="changeQuality()"></select>
    </div>
    
    <div id="videoContainer">
        <div id="message">–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–µ–æ –≤—ñ–¥ –≤–µ–¥—É—á–æ–≥–æ...</div>
        <video id="videoPlayer" controls style="display: none;"></video>
    </div>

    <script>
        const socket = io();
        const urlParams = new URLSearchParams(window.location.search);
        const roomId = urlParams.get('room');
        
        const videoPlayer = document.getElementById('videoPlayer');
        const message = document.getElementById('message');
        const qualitySelect = document.getElementById('qualitySelect');
        
        let currentVideoData = null;
        let isControlledSeek = false;

        if (!roomId) {
            message.textContent = '‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ –∫—ñ–º–Ω–∞—Ç—É!';
        } else {
            socket.on('connect', () => {
                console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ');
                socket.emit('join_room', { room: roomId });
                document.getElementById('status').textContent = '‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ';
            });

            socket.on('load_video', (data) => {
                console.log('üì• –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–µ–æ:', data);
                currentVideoData = data.videoData;
                
                // –ó–∞–ø–æ–≤–Ω—é—î–º–æ —è–∫–æ—Å—Ç—ñ
                qualitySelect.innerHTML = '';
                const qualities = Object.keys(data.videoData.videos).sort((a, b) => {
                    return parseInt(b) - parseInt(a);
                });
                
                qualities.forEach(q => {
                    const option = document.createElement('option');
                    option.value = q;
                    option.textContent = q;
                    qualitySelect.appendChild(option);
                });
                
                // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫—Ä–∞—â—É —è–∫—ñ—Å—Ç—å
                const bestQuality = qualities[0];
                loadQuality(bestQuality);
                
                document.getElementById('quality').style.display = 'block';
                message.style.display = 'none';
                videoPlayer.style.display = 'block';
            });

            socket.on('control', (data) => {
                console.log('üéÆ –ö–æ–º–∞–Ω–¥–∞:', data);
                
                if (data.action === 'play') {
                    videoPlayer.play();
                } else if (data.action === 'pause') {
                    videoPlayer.pause();
                } else if (data.action === 'seek') {
                    isControlledSeek = true;
                    videoPlayer.currentTime = data.time;
                    setTimeout(() => { isControlledSeek = false; }, 100);
                }
            });
        }

        function loadQuality(quality) {
            if (!currentVideoData) return;
            
            const videoUrl = currentVideoData.videos[quality];
            const currentTime = videoPlayer.currentTime;
            const wasPaused = videoPlayer.paused;
            
            videoPlayer.src = videoUrl;
            videoPlayer.load();
            
            videoPlayer.onloadedmetadata = () => {
                videoPlayer.currentTime = currentTime;
                if (!wasPaused) {
                    videoPlayer.play();
                }
            };
            
            qualitySelect.value = quality;
        }

        function changeQuality() {
            const quality = qualitySelect.value;
            loadQuality(quality);
        }

        // –í—ñ–¥–∫–ª—é—á–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–µ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
        videoPlayer.onplay = (e) => {
            if (!isControlledSeek) {
                videoPlayer.pause();
            }
        };

        videoPlayer.onpause = (e) => {
            if (!isControlledSeek) {
                // –î–æ–∑–≤–æ–ª—è—î–º–æ –ø–∞—É–∑—É
            }
        };
    </script>
</body>
</html>
"""

@app.route('/')
def index():
    return render_template_string(HTML_TEMPLATE)

@app.route('/controller')
def controller():
    """Discord Activity –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä"""
    return render_template_string(CONTROLLER_TEMPLATE)

@app.route('/player.html')
def player():
    """–û–∫—Ä–µ–º–∏–π –≤—ñ–¥–µ–æ –ø–ª–µ—î—Ä"""
    return render_template_string(PLAYER_TEMPLATE)

@app.route('/manifest.json')
def manifest():
    return jsonify({
        "name": "HdRezka API",
        "description": "–ü–µ—Ä–µ–≥–ª—è–¥ —Ñ—ñ–ª—å–º—ñ–≤ —Ç–∞ —Å–µ—Ä—ñ–∞–ª—ñ–≤ –∑ HdRezka —á–µ—Ä–µ–∑ Discord Activities",
        "version": "1.0.0",
        "author": "Your Name",
        "repository": "https://github.com/yourusername/hdrezka-python-app",
        "entrypoint": "/",
        "supported_platforms": ["desktop"],
        "tags": ["entertainment", "video", "streaming"],
        "permissions": {
            "identify": {
                "description": "–û—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
            }
        },
        "ui": {
            "width": 1200,
            "height": 800,
            "resizable": True
        },
        "assets": {
            "large_image": "https://your-domain.com/logo-large.png",
            "small_image": "https://your-domain.com/logo-small.png"
        }
    })

@app.route('/api/test', methods=['GET', 'POST'])
def test_api():
    """–¢–µ—Å—Ç–æ–≤–∏–π endpoint –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ API"""
    return jsonify({
        'status': 'success',
        'message': 'API –ø—Ä–∞—Ü—é—î',
        'timestamp': time(),
        'method': request.method,
        'headers': dict(request.headers),
        'data': request.get_json() if request.is_json else None
    })

@app.route('/api/debug', methods=['GET'])
def debug_info():
    """–î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π endpoint –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    return jsonify({
        'status': 'success',
        'message': 'Debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è',
        'timestamp': time(),
        'environment': {
            'PORT': os.environ.get('PORT', '–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'),
            'PYTHON_VERSION': os.environ.get('PYTHON_VERSION', '–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'),
            'RAILWAY_ENVIRONMENT': os.environ.get('RAILWAY_ENVIRONMENT', '–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'),
            'RAILWAY_PROJECT_ID': os.environ.get('RAILWAY_PROJECT_ID', '–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
        },
        'request_info': {
            'method': request.method,
            'url': request.url,
            'headers': dict(request.headers),
            'remote_addr': request.remote_addr
        }
    })

@app.route('/api/routes', methods=['GET'])
def list_routes():
    """–ü–æ–∫–∞–∑—É—î –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏"""
    routes = []
    for rule in app.url_map.iter_rules():
        routes.append({
            'endpoint': rule.endpoint,
            'methods': list(rule.methods),
            'rule': str(rule)
        })
    
    return jsonify({
        'status': 'success',
        'message': '–î–æ—Å—Ç—É–ø–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏',
        'routes': routes,
        'total': len(routes)
    })

@app.route('/api/stream-test', methods=['POST'])
def stream_test():
    """–¢–µ—Å—Ç–æ–≤–∏–π endpoint –¥–ª—è —Å—Ç—Ä—ñ–º—É"""
    print("=== STREAM TEST ENDPOINT –í–ò–ö–õ–ò–ö–ê–ù–û ===")
    try:
        data = request.get_json()
        print(f"–û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ: {data}")
        
        # –¢–ï–°–¢–û–í–Ü –í–Ü–î–ï–û –ß–ï–†–ï–ó –ü–†–û–ö–°–Ü (Discord –≤–∏–º–∞–≥–∞—î)
        base_url = request.url_root.rstrip('/')
        if base_url.startswith('http://'):
            base_url = base_url.replace('http://', 'https://')
        
        import urllib.parse
        test_videos = {
            '360p': 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',
            '720p': 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/Sintel.mp4',
            '1080p': 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/TearsOfSteel.mp4'
        }
        
        proxied_videos = {}
        for quality, video_url in test_videos.items():
            encoded_url = urllib.parse.quote(video_url, safe='')
            proxied_videos[quality] = f'{base_url}/api/video-proxy/{encoded_url}'
        
        return jsonify({
            'status': 'success',
            'message': 'Stream test –ø—Ä–∞—Ü—é—î! (—á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å—ñ)',
            'received_data': data,
            'test_videos': proxied_videos,
            'timestamp': time()
        })
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ stream_test: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/test-video')
def test_video():
    """–¢–µ—Å—Ç–æ–≤–∏–π endpoint –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—ñ–¥–µ–æ"""
    try:
        import requests
        
        # –¢–µ—Å—Ç–æ–≤–µ –≤—ñ–¥–µ–æ
        video_url = 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4'
        
        print(f"=== –¢–ï–°–¢ –í–Ü–î–ï–û ===")
        print(f"URL: {video_url}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å
        response = requests.head(video_url, timeout=10)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"Content-Type: {response.headers.get('content-type')}")
        print(f"Content-Length: {response.headers.get('content-length')}")
        
        return jsonify({
            'status': 'success',
            'video_url': video_url,
            'response_status': response.status_code,
            'content_type': response.headers.get('content-type'),
            'content_length': response.headers.get('content-length'),
            'headers': dict(response.headers)
        })
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –≤—ñ–¥–µ–æ: {e}")
        return jsonify({'error': f'–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –≤—ñ–¥–µ–æ: {str(e)}'}), 500

@app.route('/api/test-hdrezka')
def test_hdrezka():
    """–¢–µ—Å—Ç–æ–≤–∏–π endpoint –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ HdRezka –ø–∞—Ä—Å–∏–Ω–≥—É"""
    try:
        from HdRezkaApi import HdRezkaApi
        
        # –¢–µ—Å—Ç–æ–≤–∏–π URL
        test_url = 'https://rezka.ag/films/comedy/79188-chumovaya-pyatnica-2-2025-latest.html'
        
        print(f"=== –¢–ï–°–¢ HDREZKA ===")
        print(f"URL: {test_url}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç HdRezkaApi
        rezka = HdRezkaApi(test_url)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
        print("–û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏...")
        translations = rezka.getTranslations()
        print(f"–ü–µ—Ä–µ–∫–ª–∞–¥–∏: {translations}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–µ–∑–æ–Ω–∏
        print("–û—Ç—Ä–∏–º—É—î–º–æ —Å–µ–∑–æ–Ω–∏...")
        seasons = rezka.getSeasons()
        print(f"–°–µ–∑–æ–Ω–∏: {seasons}")
        
        # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç—Ä—ñ–º
        print("–°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç—Ä—ñ–º...")
        stream = rezka.getStream(season='1', episode='1', translation='1')
        
        result = {
            'status': 'success',
            'url': test_url,
            'translations': translations,
            'seasons': seasons,
            'stream_success': stream is not None,
            'stream_videos': stream.videos if stream else None,
            'message': 'HdRezka —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ'
        }
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        return jsonify(result)
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É HdRezka: {e}")
        import traceback
        print(traceback.format_exc())
        return jsonify({'error': f'–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É HdRezka: {str(e)}'}), 500

@app.route('/api/test-direct')
def test_direct():
    """–¢–µ—Å—Ç–æ–≤–∏–π endpoint –¥–ª—è –ø—Ä—è–º–∏—Ö –≤—ñ–¥–µ–æ –±–µ–∑ –ø—Ä–æ–∫—Å—ñ"""
    try:
        print("=== –¢–ï–°–¢ –ü–†–Ø–ú–ò–• –í–Ü–î–ï–û ===")
        
        # –ü—Ä—è–º—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Google –≤—ñ–¥–µ–æ
        direct_videos = {
            '360p': 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',
            '720p': 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/Sintel.mp4',
            '1080p': 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/TearsOfSteel.mp4'
        }
        
        # –¢–µ—Å—Ç—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –∫–æ–∂–Ω–æ–≥–æ –≤—ñ–¥–µ–æ
        import requests
        results = {}
        
        for quality, url in direct_videos.items():
            try:
                print(f"–¢–µ—Å—Ç—É—î–º–æ {quality}: {url}")
                response = requests.head(url, timeout=10)
                results[quality] = {
                    'url': url,
                    'status': response.status_code,
                    'content_type': response.headers.get('content-type'),
                    'content_length': response.headers.get('content-length'),
                    'accessible': response.status_code == 200
                }
                print(f"‚úÖ {quality}: {response.status_code}")
            except Exception as e:
                results[quality] = {
                    'url': url,
                    'error': str(e),
                    'accessible': False
                }
                print(f"‚ùå {quality}: {e}")
        
        result = {
            'status': 'success',
            'message': '–¢–µ—Å—Ç –ø—Ä—è–º–∏—Ö –≤—ñ–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
            'videos': results,
            'total_accessible': sum(1 for v in results.values() if v.get('accessible', False)),
            'total_videos': len(results)
        }
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        return jsonify(result)
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –ø—Ä—è–º–∏—Ö –≤—ñ–¥–µ–æ: {e}")
        import traceback
        print(traceback.format_exc())
        return jsonify({'error': f'–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –ø—Ä—è–º–∏—Ö –≤—ñ–¥–µ–æ: {str(e)}'}), 500

@app.route('/api/test-blob')
def test_blob():
    """–¢–µ—Å—Ç–æ–≤–∏–π endpoint –¥–ª—è Blob –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è"""
    try:
        print("=== –¢–ï–°–¢ BLOB –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø ===")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–∑–æ–≤–∏–π URL
        base_url = request.url_root.rstrip('/')
        if base_url.startswith('http://'):
            base_url = base_url.replace('http://', 'https://')
        
        # –¢–µ—Å—Ç–æ–≤–µ –≤—ñ–¥–µ–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å—ñ
        test_video_url = f'{base_url}/api/video-proxy/https%3A//commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4'
        
        result = {
            'status': 'success',
            'message': 'Blob —Ç–µ—Å—Ç –≥–æ—Ç–æ–≤–∏–π - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "üé¨ –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç—Ä—ñ–º" –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è',
            'test_video_url': test_video_url,
            'instructions': [
                '1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "üé¨ –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç—Ä—ñ–º"',
                '2. –í—ñ–¥–µ–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å—Å—è —è–∫ Blob',
                '3. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ª–æ–≥—ñ–≤',
                '4. –í—ñ–¥–µ–æ –º–∞—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ Discord Activities!'
            ],
            'blob_benefits': [
                '‚úÖ –û–±—Ö–æ–¥–∏—Ç—å Discord CSP –æ–±–º–µ–∂–µ–Ω–Ω—è',
                '‚úÖ –í—ñ–¥–µ–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è –Ω–∞ –∫–ª—ñ—î–Ω—Ç—ñ',
                '‚úÖ –°—Ç–≤–æ—Ä—é—î blob: URL –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è',
                '‚úÖ –ü—Ä–∞—Ü—é—î –∑ –±—É–¥—å-—è–∫–∏–º–∏ –∑–æ–≤–Ω—ñ—à–Ω—ñ–º–∏ –¥–∂–µ—Ä–µ–ª–∞–º–∏'
            ]
        }
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        return jsonify(result)
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É Blob: {e}")
        import traceback
        print(traceback.format_exc())
        return jsonify({'error': f'–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É Blob: {str(e)}'}), 500

# ===== WATCH TOGETHER –°–ò–°–¢–ï–ú–ê =====

@app.route('/api/watch/create-room', methods=['POST'])
def create_watch_room():
    """–°—Ç–≤–æ—Ä—é—î –∫—ñ–º–Ω–∞—Ç—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø–µ—Ä–µ–≥–ª—è–¥—É"""
    try:
        import uuid
        import time
        
        data = request.get_json()
        if not data:
            return jsonify({'error': '–ü–æ—Ç—Ä—ñ–±–Ω—ñ –¥–∞–Ω—ñ'}), 400
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—É –∫—ñ–º–Ω–∞—Ç—É
        room_id = str(uuid.uuid4())[:8]
        host_id = data.get('host_id', 'unknown')
        video_url = data.get('video_url')
        video_title = data.get('video_title', '–ù–µ–≤—ñ–¥–æ–º–µ –≤—ñ–¥–µ–æ')
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫—ñ–º–Ω–∞—Ç—É
        WATCH_ROOMS[room_id] = {
            'host_id': host_id,
            'video_url': video_url,
            'video_title': video_title,
            'is_playing': False,
            'current_time': 0,
            'last_update': time.time(),
            'viewers': [host_id],
            'created_at': time.time()
        }
        
        print(f"üè† –°—Ç–≤–æ—Ä–µ–Ω–æ –∫—ñ–º–Ω–∞—Ç—É {room_id} –¥–ª—è {video_title}")
        
        return jsonify({
            'status': 'success',
            'room_id': room_id,
            'message': '–ö—ñ–º–Ω–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞',
            'video_url': video_url,
            'video_title': video_title
        })
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç–∏: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/watch/join-room/<room_id>', methods=['POST'])
def join_watch_room(room_id):
    """–ü—Ä–∏—î–¥–Ω—É—î—Ç—å—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'error': '–ü–æ—Ç—Ä—ñ–±–Ω—ñ –¥–∞–Ω—ñ'}), 400
        
        user_id = data.get('user_id', 'unknown')
        
        if room_id not in WATCH_ROOMS:
            return jsonify({'error': '–ö—ñ–º–Ω–∞—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞'}), 404
        
        room = WATCH_ROOMS[room_id]
        
        # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if user_id not in room['viewers']:
            room['viewers'].append(user_id)
        
        room['last_update'] = time.time()
        
        print(f"üë• {user_id} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ {room_id}")
        
        return jsonify({
            'status': 'success',
            'room_id': room_id,
            'video_url': room['video_url'],
            'video_title': room['video_title'],
            'is_playing': room['is_playing'],
            'current_time': room['current_time'],
            'viewers_count': len(room['viewers'])
        })
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/watch/sync/<room_id>', methods=['POST'])
def sync_watch_room(room_id):
    """–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î —Å—Ç–∞–Ω –ø–µ—Ä–µ–≥–ª—è–¥—É"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'error': '–ü–æ—Ç—Ä—ñ–±–Ω—ñ –¥–∞–Ω—ñ'}), 400
        
        if room_id not in WATCH_ROOMS:
            return jsonify({'error': '–ö—ñ–º–Ω–∞—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞'}), 404
        
        room = WATCH_ROOMS[room_id]
        user_id = data.get('user_id')
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫—ñ–º–Ω–∞—Ç–∏
        room['is_playing'] = data.get('is_playing', False)
        room['current_time'] = data.get('current_time', 0)
        room['last_update'] = time.time()
        
        print(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∫—ñ–º–Ω–∞—Ç–∏ {room_id}: {room['is_playing']} @ {room['current_time']:.1f}s")
        
        return jsonify({
            'status': 'success',
            'is_playing': room['is_playing'],
            'current_time': room['current_time'],
            'viewers_count': len(room['viewers'])
        })
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/watch/room/<room_id>')
def get_watch_room(room_id):
    """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞–Ω –∫—ñ–º–Ω–∞—Ç–∏"""
    try:
        if room_id not in WATCH_ROOMS:
            return jsonify({'error': '–ö—ñ–º–Ω–∞—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞'}), 404
        
        room = WATCH_ROOMS[room_id]
        
        # –û—á–∏—â—É—î–º–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –∫—ñ–º–Ω–∞—Ç–∏
        if time.time() - room['last_update'] > ROOM_TIMEOUT:
            del WATCH_ROOMS[room_id]
            return jsonify({'error': '–ö—ñ–º–Ω–∞—Ç–∞ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞'}), 410
        
        return jsonify({
            'status': 'success',
            'room_id': room_id,
            'video_url': room['video_url'],
            'video_title': room['video_title'],
            'is_playing': room['is_playing'],
            'current_time': room['current_time'],
            'viewers_count': len(room['viewers']),
            'created_at': room['created_at']
        })
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç–∏: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/watch/rooms')
def list_watch_rooms():
    """–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫—ñ–º–Ω–∞—Ç"""
    try:
        # –û—á–∏—â—É—î–º–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –∫—ñ–º–Ω–∞—Ç–∏
        current_time = time.time()
        expired_rooms = []
        
        for room_id, room in WATCH_ROOMS.items():
            if current_time - room['last_update'] > ROOM_TIMEOUT:
                expired_rooms.append(room_id)
        
        for room_id in expired_rooms:
            del WATCH_ROOMS[room_id]
            print(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—É –∫—ñ–º–Ω–∞—Ç—É {room_id}")
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –∫—ñ–º–Ω–∞—Ç–∏
        active_rooms = []
        for room_id, room in WATCH_ROOMS.items():
            active_rooms.append({
                'room_id': room_id,
                'video_title': room['video_title'],
                'viewers_count': len(room['viewers']),
                'is_playing': room['is_playing'],
                'created_at': room['created_at']
            })
        
        return jsonify({
            'status': 'success',
            'rooms': active_rooms,
            'total': len(active_rooms)
        })
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —Å–ø–∏—Å–∫—É –∫—ñ–º–Ω–∞—Ç: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/video-proxy/<path:video_url>')
def video_proxy(video_url):
    """–ü—Ä–æ–∫—Å—ñ –¥–ª—è –≤—ñ–¥–µ–æ –∑ –ø–æ–≤–Ω–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é Range requests"""
    try:
        import requests
        from flask import Response, stream_with_context
        import urllib.parse
        
        # –î–µ–∫–æ–¥—É—î–º–æ URL
        video_url = urllib.parse.unquote(video_url)
        
        print(f"\n=== –í–Ü–î–ï–û –ü–†–û–ö–°–Ü ===")
        print(f"URL: {video_url}")
        print(f"Client headers: {dict(request.headers)}")
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': '*/*',
            'Accept-Language': 'en-US,en;q=0.9',
        }
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–¥–∞—î–º–æ Range –∑–∞–≥–æ–ª–æ–≤–æ–∫
        range_header = request.headers.get('Range')
        if range_header:
            headers['Range'] = range_header
            print(f"üìä Range request: {range_header}")
        
        # –ó–∞–ø–∏—Ç –¥–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ñ–¥–µ–æ
        print(f"üåê –ó–∞–ø–∏—Ç –¥–æ: {video_url}")
        response = requests.get(
            video_url, 
            headers=headers,
            stream=True,
            timeout=30
        )
        
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"Content-Type: {response.headers.get('content-type')}")
        print(f"Content-Length: {response.headers.get('content-length')}")
        
        if range_header:
            print(f"Content-Range: {response.headers.get('content-range', 'Not provided')}")
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        response_headers = {
            'Content-Type': response.headers.get('content-type', 'video/mp4'),
            'Accept-Ranges': 'bytes',
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'GET, HEAD, OPTIONS',
            'Access-Control-Allow-Headers': 'Range, Content-Type, Accept',
            'Access-Control-Expose-Headers': 'Content-Length, Content-Range, Accept-Ranges',
            'Cache-Control': 'public, max-age=3600',
        }
        
        # –î–æ–¥–∞—î–º–æ Content-Length
        if response.headers.get('content-length'):
            response_headers['Content-Length'] = response.headers.get('content-length')
        
        # –ö–†–ò–¢–ò–ß–ù–û: –î–æ–¥–∞—î–º–æ Content-Range –¥–ª—è Range requests
        if response.headers.get('content-range'):
            response_headers['Content-Range'] = response.headers.get('content-range')
            print(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ Content-Range: {response_headers['Content-Range']}")
        
        # Streaming –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        def generate():
            try:
                bytes_sent = 0
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        bytes_sent += len(chunk)
                        yield chunk
                print(f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ {bytes_sent} –±–∞–π—Ç")
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ generate: {e}")
                raise
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        # 206 Partial Content –¥–ª—è Range requests, 200 –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª—É
        status_code = response.status_code
        print(f"üì§ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞—Ç—É—Å: {status_code}")
        
        return Response(
            stream_with_context(generate()),
            status=status_code,
            headers=response_headers,
            direct_passthrough=True
        )
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")
        import traceback
        print(traceback.format_exc())
        return jsonify({'error': str(e)}), 502
        
    except Exception as e:
        print(f"‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        print(traceback.format_exc())
        return jsonify({'error': str(e)}), 500

@app.route('/api/video-proxy/<path:video_url>', methods=['OPTIONS'])
def video_proxy_options(video_url):
    """CORS preflight"""
    return '', 204, {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, HEAD, OPTIONS',
        'Access-Control-Allow-Headers': 'Range, Content-Type, Accept',
        'Access-Control-Max-Age': '3600'
    }

@app.route('/api/video-proxy/<path:video_url>', methods=['HEAD'])
def video_proxy_head(video_url):
    """HEAD –∑–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≤—ñ–¥–µ–æ"""
    try:
        import requests
        import urllib.parse
        
        video_url = urllib.parse.unquote(video_url)
        
        print(f"HEAD –∑–∞–ø–∏—Ç: {video_url}")
        
        response = requests.head(video_url, timeout=10)
        
        return '', response.status_code, {
            'Content-Type': response.headers.get('content-type', 'video/mp4'),
            'Content-Length': response.headers.get('content-length', '0'),
            'Accept-Ranges': 'bytes',
            'Access-Control-Allow-Origin': '*'
        }
        
    except Exception as e:
        print(f"HEAD –ø–æ–º–∏–ª–∫–∞: {e}")
        return '', 500

@app.route('/api/parse', methods=['POST'])
def parse_content():
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–ø–∏—Ç –º—ñ—Å—Ç–∏—Ç—å JSON
        if not request.is_json:
            return jsonify({'error': '–ó–∞–ø–∏—Ç –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ JSON –¥–∞–Ω—ñ'}), 400
            
        data = request.get_json()
        if not data:
            return jsonify({'error': '–ü–æ—Ä–æ–∂–Ω—ñ–π JSON –∑–∞–ø–∏—Ç'}), 400
            
        url = data.get('url')
        
        if not url:
            return jsonify({'error': 'URL —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º'}), 400
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
        cached_item = CACHE.get(url)
        if cached_item and (time() - cached_item['timestamp'] < CACHE_TIMEOUT_SECONDS):
            print(f"–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∑ –∫–µ—à—É –¥–ª—è URL: {url}")
            return jsonify(cached_item['data'])

        print(f"–ö–µ—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –∑–∞—Å—Ç–∞—Ä—ñ–≤. –í–∏–∫–æ–Ω—É—é –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è URL: {url}")
        # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä API
        rezka = HdRezkaApi(url)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ rezka.id, rezka.name, rezka.type, —â–æ–± —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∏ @property
        result = {
            'name': rezka.name,
            'type': rezka.type,
            'id': rezka.id,
            'translations': rezka.getTranslations()
        }
        
        # –Ø–∫—â–æ —Ü–µ —Å–µ—Ä—ñ–∞–ª, –æ—Ç—Ä–∏–º—É—î–º–æ —Å–µ–∑–æ–Ω–∏ —Ç–∞ –µ–ø—ñ–∑–æ–¥–∏
        if rezka.type == 'video.tv_series':
            result['seasons'] = rezka.getSeasons()
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–µ—à
        CACHE[url] = {
            'data': result,
            'timestamp': time()
        }

        return jsonify(result)
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É: {str(e)}")
        print(traceback.format_exc())
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        error_message = str(e)
        if "403" in error_message or "Forbidden" in error_message:
            error_message = "üö´ HdRezka –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –¥–æ—Å—Ç—É–ø –∑ —Å–µ—Ä–≤–µ—Ä—ñ–≤ Render.com. –°–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –Ü–Ω—à–∏–π URL –∑ HdRezka\n‚Ä¢ –ü—Ä–æ—Å—Ç—ñ—à–∏–π —Ñ—ñ–ª—å–º\n‚Ä¢ –ü—ñ–∑–Ω—ñ—à–µ (–º–µ–Ω—à–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è)\n‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ VPN"
        elif "404" in error_message:
            error_message = "‚ùå URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è."
        elif "timeout" in error_message.lower() or "timed out" in error_message.lower():
            error_message = "‚è∞ –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ. HdRezka –∑–∞–Ω–∞–¥—Ç–æ –ø–æ–≤—ñ–ª—å–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î."
        elif "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –∂–æ–¥–Ω–æ–≥–æ –¥–æ–º–µ–Ω—É" in error_message:
            error_message = "üåê –í—Å—ñ –¥–æ–º–µ–Ω–∏ HdRezka –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –¥–ª—è —Å–µ—Ä–≤–µ—Ä—ñ–≤ Render.com. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π URL –∞–±–æ –ø—ñ–∑–Ω—ñ—à–µ."
        
        return jsonify({'error': error_message}), 500

@app.route('/api/stream', methods=['POST'])
def get_stream():
    print("=== STREAM ENDPOINT –í–ò–ö–õ–ò–ö–ê–ù–û ===")
    print(f"Method: {request.method}")
    print(f"URL: {request.url}")
    print(f"Headers: {dict(request.headers)}")
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–ø–∏—Ç –º—ñ—Å—Ç–∏—Ç—å JSON
        if not request.is_json:
            print("–ü–æ–º–∏–ª–∫–∞: –Ω–µ JSON –∑–∞–ø–∏—Ç")
            return jsonify({'error': '–ó–∞–ø–∏—Ç –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ JSON –¥–∞–Ω—ñ'}), 400
            
        data = request.get_json()
        if not data:
            return jsonify({'error': '–ü–æ—Ä–æ–∂–Ω—ñ–π JSON –∑–∞–ø–∏—Ç'}), 400
            
        url = data.get('url')
        translation = data.get('translation')
        season = data.get('season')
        episode = data.get('episode')
        
        print(f"–û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ: url={url}, translation={translation}, season={season}, episode={episode}")
        
        if not url or not translation:
            return jsonify({'error': 'URL —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥ —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º–∏'}), 400
        
        # ===== –¢–ï–°–¢–û–í–Ü –í–Ü–î–ï–û –ß–ï–†–ï–ó –ü–†–û–ö–°–Ü =====
        print("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –≤—ñ–¥–µ–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å—ñ")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–∑–æ–≤–∏–π URL
        base_url = request.url_root.rstrip('/')
        if base_url.startswith('http://'):
            base_url = base_url.replace('http://', 'https://')
        
        print(f"Base URL: {base_url}")
        
        # –¢–µ—Å—Ç–æ–≤—ñ –≤—ñ–¥–µ–æ
        test_videos = {
            '360p': 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',
            '720p': 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/Sintel.mp4',
            '1080p': 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/TearsOfSteel.mp4'
        }
        
        # –ü—Ä–æ–∫—Å—ñ—Ä—É—î–º–æ —á–µ—Ä–µ–∑ –Ω–∞—à –¥–æ–º–µ–Ω
        import urllib.parse
        proxied_videos = {}
        for quality, video_url in test_videos.items():
            encoded_url = urllib.parse.quote(video_url, safe='')
            proxied_url = f'{base_url}/api/video-proxy/{encoded_url}'
            proxied_videos[quality] = proxied_url
            print(f"  {quality}: {proxied_url}")
        
        result = {
            'videos': proxied_videos,
            'season': season,
            'episode': episode,
            'test_mode': True,
            'message': '‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ñ –≤—ñ–¥–µ–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å—ñ (Discord –≤–∏–º–∞–≥–∞—î)'
        }
        
        print(f"‚úÖ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ {len(proxied_videos)} —è–∫–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å—ñ")
        return jsonify(result)
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç—Ä—ñ–º—É: {str(e)}")
        print(traceback.format_exc())
        return jsonify({'error': str(e)}), 500

# ===== SOCKETIO EVENTS =====

@socketio.on('join_room')
def handle_join(data):
    room = data['room']
    join_room(room)
    
    if room not in SOCKET_ROOMS:
        SOCKET_ROOMS[room] = {
            'users': [],
            'video': None
        }
    
    SOCKET_ROOMS[room]['users'].append(request.sid)
    
    emit('room_joined', {
        'room': room,
        'user_count': len(SOCKET_ROOMS[room]['users'])
    }, room=request.sid)
    
    emit('user_joined', {
        'user': request.sid,
        'users': SOCKET_ROOMS[room]['users']
    }, room=room)

@socketio.on('disconnect')
def handle_disconnect():
    for room, data in SOCKET_ROOMS.items():
        if request.sid in data['users']:
            data['users'].remove(request.sid)
            
            emit('user_left', {
                'user': request.sid,
                'users': data['users']
            }, room=room)
            
            break

@socketio.on('load_video')
def handle_load_video(data):
    room = data['room']
    
    if room in SOCKET_ROOMS:
        SOCKET_ROOMS[room]['video'] = data['videoData']
    
    emit('load_video', data, room=room, include_self=False)

@socketio.on('control')
def handle_control(data):
    room = data['room']
    emit('control', data, room=room, include_self=False)

if __name__ == '__main__':
    import os
    
    # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    logger.info(f"Python –≤–µ—Ä—Å—ñ—è: {sys.version}")
    logger.info(f"–ü–æ—Ç–æ—á–Ω–∏–π —Ä–æ–±–æ—á–∏–π –∫–∞—Ç–∞–ª–æ–≥: {os.getcwd()}")
    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞: {list(os.environ.keys())}")
    
    port = int(os.environ.get('PORT', 5001))
    logger.info(f"–ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É: {port}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
    try:
        import flask
        import requests
        import bs4
        logger.info("–í—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ")
    except ImportError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
        sys.exit(1)
    
    socketio.run(app, debug=False, host='0.0.0.0', port=port)