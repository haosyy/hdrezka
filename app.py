from flask import Flask, request, jsonify, render_template_string
from flask_cors import CORS
import json
import traceback
import os
import sys
from time import time
from HdRezkaApi import HdRezkaApi

# –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app, origins=[
    "https://discord.com",
    "https://*.discord.com",
    "https://discordapp.com",
    "https://*.discordapp.com"
])

# –ü—Ä–æ—Å—Ç–∏–π –∫–µ—à –≤ –ø–∞–º'—è—Ç—ñ. –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Redis –∞–±–æ Memcached.
# –ö–ª—é—á - URL, –∑–Ω–∞—á–µ–Ω–Ω—è - —Å–ª–æ–≤–Ω–∏–∫ –∑ –¥–∞–Ω–∏–º–∏ —Ç–∞ —á–∞—Å–æ–º –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.
CACHE = {}
CACHE_TIMEOUT_SECONDS = 3600 # 1 –≥–æ–¥–∏–Ω–∞

# HTML —à–∞–±–ª–æ–Ω (–≤–±—É–¥–æ–≤–∞–Ω–∏–π –≤ –∫–æ–¥)
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HdRezka API Test</title>
    <script src="https://discord.com/api/activities/sdk.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background: #f5f5f5;
        }
        .container {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        h2 {
            color: #333;
            border-bottom: 2px solid #4CAF50;
            padding-bottom: 10px;
        }
        input, select, button {
            width: 100%;
            padding: 10px;
            margin: 5px 0;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }
        button {
            background: #4CAF50;
            color: white;
            cursor: pointer;
            font-size: 16px;
        }
        button:hover {
            background: #45a049;
        }
        button:disabled {
            background: #ccc;
            cursor: not-allowed;
        }
        .result {
            background: #f9f9f9;
            border: 1px solid #ddd;
            padding: 15px;
            border-radius: 4px;
            margin-top: 10px;
            white-space: pre-wrap;
            font-family: monospace;
            max-height: 400px;
            overflow-y: auto;
        }
        .error {
            background: #ffebee;
            border-color: #f44336;
            color: #d32f2f;
        }
        .success {
            background: #e8f5e8;
            border-color: #4CAF50;
            color: #2e7d32;
        }
        .loading {
            color: #ff9800;
        }
        .form-group {
            margin-bottom: 15px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        #seasonEpisodeControls {
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>üé¨ HdRezka API Tester</h2>
        
        <div class="form-group">
            <label for="url">URL —Å–∞–π—Ç—É:</label>
            <input type="url" id="url" placeholder="https://hdrezka.ag/..." 
                   value="https://hdrezka.me/animation/adventures/31356-arifureta-silneyshiy-remeslennik-v-mire-tv-1-2019.html#t:111-s:1-e:3">
        </div>

        <button onclick="parseContent()">üì• –ü–∞—Ä—Å–∏—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç</button>
        <button onclick="testAPI()" style="background: #2196F3; margin-left: 10px;">üß™ –¢–µ—Å—Ç API</button>
        <button onclick="testDomains()" style="background: #FF9800; margin-left: 10px;">üåê –¢–µ—Å—Ç –¥–æ–º–µ–Ω—ñ–≤</button>
        <div id="parseResult" class="result" style="display: none;"></div>
    </div>

    <div class="container" id="streamContainer" style="display: none;">
        <h2>üé• –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç—Ä—ñ–º</h2>
        
        <div class="form-group">
            <label for="translation">–ü–µ—Ä–µ–∫–ª–∞–¥:</label>
            <select id="translation"></select>
        </div>

        <div id="seasonEpisodeControls">
            <div class="form-group">
                <label for="season">–°–µ–∑–æ–Ω:</label>
                <select id="season"></select>
            </div>

            <div class="form-group">
                <label for="episode">–°–µ—Ä—ñ—è:</label>
                <select id="episode"></select>
            </div>
        </div>

        <button onclick="getStream()">üé¨ –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç—Ä—ñ–º</button>
        <div id="streamResult" class="result" style="display: none;"></div>
        
        <div id="videoContainer" style="display: none; margin-top: 20px;">
            <h3>üì∫ –í—ñ–¥–µ–æ –ø–ª–µ—î—Ä</h3>
            <div class="form-group">
                <label for="qualitySelect">–Ø–∫—ñ—Å—Ç—å –≤—ñ–¥–µ–æ:</label>
                <select id="qualitySelect" onchange="changeVideoQuality()"></select>
            </div>
            <video id="videoPlayer" controls style="width: 100%; max-width: 800px; height: auto;">
                –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –≤—ñ–¥–µ–æ
            </video>
            <div id="videoInfo" style="margin-top: 10px; font-size: 14px; color: #666;"></div>
        </div>
    </div>

    <script>
        // Discord Activities SDK —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
        let discordSDK;
        
        async function initializeDiscordSDK() {
            try {
                discordSDK = new DiscordSDK('848279368462499851'); // –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à Client ID
                
                const { code } = await discordSDK.commands.authorize({
                    client_id: '848279368462499851', // –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à Client ID
                    response_type: 'code',
                    state: '',
                    prompt: 'none',
                    scope: ['identify', 'guilds']
                });
                
                console.log('Discord SDK —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
                
                // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è Discord Activities
                document.title = 'HdRezka - Discord Activity';
                
            } catch (error) {
                console.log('Discord SDK –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π (–∑–∞–ø—É—Å–∫ –ø–æ–∑–∞ Discord):', error);
                // –Ø–∫—â–æ –Ω–µ –≤ Discord, –ø—Ä–∞—Ü—é—î–º–æ —è–∫ –∑–≤–∏—á–∞–π–Ω–∏–π —Å–∞–π—Ç
            }
        }
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Discord SDK –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        window.addEventListener('load', initializeDiscordSDK);
        
        const API_BASE = '/api';
        let currentData = null;
        let currentStreamData = null;

        const urlInput = document.getElementById('url');
        const parseResultDiv = document.getElementById('parseResult');
        const streamContainerDiv = document.getElementById('streamContainer');
        const translationSelect = document.getElementById('translation');
        const seasonSelect = document.getElementById('season');
        const episodeSelect = document.getElementById('episode');
        const streamResultDiv = document.getElementById('streamResult');
        const videoContainerDiv = document.getElementById('videoContainer');
        const qualitySelect = document.getElementById('qualitySelect');
        const videoPlayer = document.getElementById('videoPlayer');
        const videoInfoDiv = document.getElementById('videoInfo');
        const seasonEpisodeControls = document.getElementById('seasonEpisodeControls');

        function showResult(element, data, isError = false) {
            element.style.display = 'block';
            element.className = `result ${isError ? 'error' : 'success'}`;
            element.textContent = typeof data === 'string' ? data : JSON.stringify(data, null, 2);
        }

        function showLoading(element, message = '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...') {
            element.style.display = 'block';
            element.className = 'result loading';
            element.textContent = message;
        }

        async function parseContent() {
            const url = urlInput.value;
            if (!url) {
                alert('–í–≤–µ–¥—ñ—Ç—å URL!');
                return;
            }

            showLoading(parseResultDiv, '–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç—É...');
            streamContainerDiv.style.display = 'none';
            videoContainerDiv.style.display = 'none';
            
            try {
                const response = await fetch(`${API_BASE}/parse`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ url })
                });

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —î JSON
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    const text = await response.text();
                    console.error('–ù–µ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å:', text);
                    throw new Error(`–°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ JSON –¥–∞–Ω—ñ. –°—Ç–∞—Ç—É—Å: ${response.status}`);
                }

                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.error || '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É');
                }

                currentData = data;
                showResult(parseResultDiv, data);
                
                // –û–Ω–æ–≤–ª—é—î–º–æ Discord –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
                updateDiscordActivity(data.name || '–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç', '–ü–µ—Ä–µ–≥–ª—è–¥–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç');
                
                fillTranslations(data.translations);

                if (data.type === 'video.tv_series') {
                    seasonEpisodeControls.style.display = 'block';
                    fillSeasonsAndEpisodes(data);
                } else {
                    seasonEpisodeControls.style.display = 'none';
                }
                
                streamContainerDiv.style.display = 'block';
                
            } catch (error) {
                showResult(parseResultDiv, `–ü–æ–º–∏–ª–∫–∞: ${error.message}`, true);
            }
        }

        function fillTranslations(translations) {
            translationSelect.innerHTML = '';
            for (const [name, id] of Object.entries(translations)) {
                const option = document.createElement('option');
                option.value = id;
                option.textContent = name;
                translationSelect.appendChild(option);
            }
        }

        function fillSeasonsAndEpisodes(data) {
            seasonSelect.innerHTML = '';
            episodeSelect.innerHTML = '';

            const selectedTranslatorId = translationSelect.value;
            const translatorName = Object.keys(data.translations).find(key => data.translations[key] === selectedTranslatorId);
            
            if (translatorName && data.seasons && data.seasons[translatorName]) {
                const seasonsInfoForTranslator = data.seasons[translatorName];
                
                for (const [id, name] of Object.entries(seasonsInfoForTranslator.seasons)) {
                    const option = document.createElement('option');
                    option.value = id;
                    option.textContent = name;
                    seasonSelect.appendChild(option);
                }
                
                if (Object.keys(seasonsInfoForTranslator.seasons).length > 0) {
                    const firstSeasonId = Object.keys(seasonsInfoForTranslator.seasons)[0];
                    fillEpisodes(firstSeasonId);
                }
            }
        }

        function fillEpisodes(seasonId) {
            episodeSelect.innerHTML = '';
            
            if (!currentData || !currentData.seasons) return;
            
            const selectedTranslatorId = translationSelect.value;
            const translatorName = Object.keys(currentData.translations).find(key => currentData.translations[key] === selectedTranslatorId);

            if (translatorName && currentData.seasons[translatorName] && 
                currentData.seasons[translatorName].episodes && 
                currentData.seasons[translatorName].episodes[seasonId]) {
                
                const episodes = currentData.seasons[translatorName].episodes[seasonId];
                for (const [id, name] of Object.entries(episodes)) {
                    const option = document.createElement('option');
                    option.value = id;
                    option.textContent = name;
                    episodeSelect.appendChild(option);
                }
            }
        }

        translationSelect.addEventListener('change', function() {
            if (currentData && currentData.type === 'video.tv_series') {
                fillSeasonsAndEpisodes(currentData);
            }
        });

        seasonSelect.addEventListener('change', function() {
            fillEpisodes(this.value);
        });

        async function getStream() {
            const url = urlInput.value;
            const translation = translationSelect.value;
            let season = null;
            let episode = null;

            if (!url || !translation) {
                alert('–°–ø–æ—á–∞—Ç–∫—É –ø–∞—Ä—Å—ñ—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–∞ –≤–∏–±–µ—Ä—ñ—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥!');
                return;
            }

            if (currentData && currentData.type === 'video.tv_series') {
                season = seasonSelect.value;
                episode = episodeSelect.value;
                if (!season || !episode) {
                    alert('–î–ª—è —Å–µ—Ä—ñ–∞–ª—É –≤–∏–±–µ—Ä—ñ—Ç—å —Å–µ–∑–æ–Ω —ñ —Å–µ—Ä—ñ—é!');
                    return;
                }
            }

            showLoading(streamResultDiv, '–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç—Ä—ñ–º—É...');
            videoContainerDiv.style.display = 'none';
            
            try {
                const requestData = { url, translation };
                if (season) requestData.season = season;
                if (episode) requestData.episode = episode;

                const response = await fetch(`${API_BASE}/stream`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(requestData)
                });

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —î JSON
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    const text = await response.text();
                    console.error('–ù–µ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è stream:', text);
                    throw new Error(`–°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ JSON –¥–∞–Ω—ñ. –°—Ç–∞—Ç—É—Å: ${response.status}`);
                }

                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.error || '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç—Ä—ñ–º—É');
                }

                currentStreamData = data;
                showResult(streamResultDiv, data);
                
                if (data.videos && Object.keys(data.videos).length > 0) {
                    showVideoPlayer(data.videos);
                } else {
                    showResult(streamResultDiv, '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤—ñ–¥–µ–æ–ø–æ—Ç–æ–∫—ñ–≤.', true);
                }
                
            } catch (error) {
                showResult(streamResultDiv, `–ü–æ–º–∏–ª–∫–∞: ${error.message}`, true);
            }
        }

        function showVideoPlayer(videos) {
            const qualities = Object.keys(videos).sort((a, b) => {
                const aNum = parseInt(a);
                const bNum = parseInt(b);
                return bNum - aNum;
            });
            
            qualitySelect.innerHTML = '';
            qualities.forEach(quality => {
                const option = document.createElement('option');
                option.value = quality;
                option.textContent = quality;
                qualitySelect.appendChild(option);
            });
            
            if (qualities.length > 0) {
                const bestQuality = qualities[0];
                qualitySelect.value = bestQuality;
                videoPlayer.src = videos[bestQuality];
                videoPlayer.load();
                updateVideoInfo(bestQuality, videos[bestQuality]);
            }
            
            videoContainerDiv.style.display = 'block';
        }

        function changeVideoQuality() {
            const selectedQuality = qualitySelect.value;
            
            if (currentStreamData && currentStreamData.videos[selectedQuality]) {
                const currentTime = videoPlayer.currentTime;
                videoPlayer.src = currentStreamData.videos[selectedQuality];
                videoPlayer.load();
                videoPlayer.currentTime = currentTime;
                videoPlayer.play();
                updateVideoInfo(selectedQuality, currentStreamData.videos[selectedQuality]);
            }
        }

        function updateVideoInfo(quality, url) {
            const urlShort = url.length > 100 ? url.substring(0, 100) + '...' : url;
            
            let seasonEpisode = '';
            if (currentStreamData.season && currentStreamData.episode) {
                seasonEpisode = `–°–µ–∑–æ–Ω ${currentStreamData.season}, –°–µ—Ä—ñ—è ${currentStreamData.episode} | `;
            }
            
            videoInfoDiv.innerHTML = `
                <strong>–Ø–∫—ñ—Å—Ç—å:</strong> ${quality} | 
                ${seasonEpisode}
                <strong>URL:</strong> <a href="${url}" target="_blank" style="color: #4CAF50;">${urlShort}</a>
            `;
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å Discord Activities
            updateDiscordActivity(currentData?.name || '–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç', '–î–∏–≤–∏—Ç—å—Å—è –≤—ñ–¥–µ–æ');
        }
        
        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É Discord Activities
        async function updateDiscordActivity(details, state) {
            if (discordSDK) {
                try {
                    await discordSDK.commands.setActivity({
                        activity: {
                            details: details,
                            state: state,
                            assets: {
                                large_image: 'hdrezka_logo',
                                large_text: 'HdRezka API'
                            },
                            timestamps: {
                                start: Math.floor(Date.now() / 1000)
                            }
                        }
                    });
                } catch (error) {
                    console.log('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Discord –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:', error);
                }
            }
        }
        
        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è Discord –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        async function clearDiscordActivity() {
            if (discordSDK) {
                try {
                    await discordSDK.commands.setActivity({
                        activity: null
                    });
                } catch (error) {
                    console.log('–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è Discord –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:', error);
                }
            }
        }
        
        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API
        async function testAPI() {
            const parseResultDiv = document.getElementById('parseResult');
            showLoading(parseResultDiv, '–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API...');
            
            try {
                const response = await fetch(`${API_BASE}/test`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ test: 'data' })
                });
                
                console.log('–¢–µ—Å—Ç API - —Å—Ç–∞—Ç—É—Å:', response.status);
                console.log('–¢–µ—Å—Ç API - –∑–∞–≥–æ–ª–æ–≤–∫–∏:', response.headers);
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —î JSON
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    const text = await response.text();
                    console.error('API –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ JSON:', text);
                    showResult(parseResultDiv, `API –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ JSON –¥–∞–Ω—ñ:\n${text}`, true);
                    return;
                }
                
                const data = await response.json();
                showResult(parseResultDiv, data);
                
                console.log('API —Ç–µ—Å—Ç —É—Å–ø—ñ—à–Ω–∏–π:', data);
                
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É API:', error);
                showResult(parseResultDiv, `–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É API: ${error.message}`, true);
            }
        }
        
        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ–º–µ–Ω—ñ–≤ HdRezka
        async function testDomains() {
            const parseResultDiv = document.getElementById('parseResult');
            showLoading(parseResultDiv, '–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ–º–µ–Ω—ñ–≤ HdRezka...');
            
            const domains = [
                'https://rezka.ag',
                'https://hdrezka.ag', 
                'https://hdrezka.me',
                'https://hdrezka.ua'
            ];
            
            const results = [];
            
            for (const domain of domains) {
                try {
                    console.log(`–¢–µ—Å—Ç—É—î–º–æ –¥–æ–º–µ–Ω: ${domain}`);
                    const response = await fetch(domain, {
                        method: 'HEAD',
                        mode: 'no-cors',
                        timeout: 5000
                    });
                    
                    results.push({
                        domain: domain,
                        status: 'success',
                        message: '–î–æ—Å—Ç—É–ø–Ω–∏–π'
                    });
                    
                } catch (error) {
                    console.log(`–î–æ–º–µ–Ω ${domain} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π:`, error);
                    results.push({
                        domain: domain,
                        status: 'error',
                        message: error.message
                    });
                }
            }
            
            showResult(parseResultDiv, {
                message: '–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ–º–µ–Ω—ñ–≤',
                results: results,
                timestamp: new Date().toISOString()
            });
        }
    </script>
</body>
</html>
"""

@app.route('/')
def index():
    return render_template_string(HTML_TEMPLATE)

@app.route('/manifest.json')
def manifest():
    return jsonify({
        "name": "HdRezka API",
        "description": "–ü–µ—Ä–µ–≥–ª—è–¥ —Ñ—ñ–ª—å–º—ñ–≤ —Ç–∞ —Å–µ—Ä—ñ–∞–ª—ñ–≤ –∑ HdRezka —á–µ—Ä–µ–∑ Discord Activities",
        "version": "1.0.0",
        "author": "Your Name",
        "repository": "https://github.com/yourusername/hdrezka-python-app",
        "entrypoint": "/",
        "supported_platforms": ["desktop"],
        "tags": ["entertainment", "video", "streaming"],
        "permissions": {
            "identify": {
                "description": "–û—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
            }
        },
        "ui": {
            "width": 1200,
            "height": 800,
            "resizable": True
        },
        "assets": {
            "large_image": "https://your-domain.com/logo-large.png",
            "small_image": "https://your-domain.com/logo-small.png"
        }
    })

@app.route('/api/test', methods=['GET', 'POST'])
def test_api():
    """–¢–µ—Å—Ç–æ–≤–∏–π endpoint –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ API"""
    return jsonify({
        'status': 'success',
        'message': 'API –ø—Ä–∞—Ü—é—î',
        'timestamp': time(),
        'method': request.method,
        'headers': dict(request.headers),
        'data': request.get_json() if request.is_json else None
    })

@app.route('/api/parse', methods=['POST'])
def parse_content():
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–ø–∏—Ç –º—ñ—Å—Ç–∏—Ç—å JSON
        if not request.is_json:
            return jsonify({'error': '–ó–∞–ø–∏—Ç –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ JSON –¥–∞–Ω—ñ'}), 400
            
        data = request.get_json()
        if not data:
            return jsonify({'error': '–ü–æ—Ä–æ–∂–Ω—ñ–π JSON –∑–∞–ø–∏—Ç'}), 400
            
        url = data.get('url')
        
        if not url:
            return jsonify({'error': 'URL —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º'}), 400
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
        cached_item = CACHE.get(url)
        if cached_item and (time() - cached_item['timestamp'] < CACHE_TIMEOUT_SECONDS):
            print(f"–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∑ –∫–µ—à—É –¥–ª—è URL: {url}")
            return jsonify(cached_item['data'])

        print(f"–ö–µ—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –∑–∞—Å—Ç–∞—Ä—ñ–≤. –í–∏–∫–æ–Ω—É—é –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è URL: {url}")
        # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä API
        rezka = HdRezkaApi(url)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ rezka.id, rezka.name, rezka.type, —â–æ–± —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∏ @property
        result = {
            'name': rezka.name,
            'type': rezka.type,
            'id': rezka.id,
            'translations': rezka.getTranslations()
        }
        
        # –Ø–∫—â–æ —Ü–µ —Å–µ—Ä—ñ–∞–ª, –æ—Ç—Ä–∏–º—É—î–º–æ —Å–µ–∑–æ–Ω–∏ —Ç–∞ –µ–ø—ñ–∑–æ–¥–∏
        if rezka.type == 'video.tv_series':
            result['seasons'] = rezka.getSeasons()
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–µ—à
        CACHE[url] = {
            'data': result,
            'timestamp': time()
        }

        return jsonify(result)
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É: {str(e)}")
        print(traceback.format_exc())
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        error_message = str(e)
        if "403" in error_message:
            error_message = "–°–∞–π—Ç —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –¥–æ—Å—Ç—É–ø. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —ñ–Ω—à–∏–π URL."
        elif "404" in error_message:
            error_message = "URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è."
        elif "timeout" in error_message.lower():
            error_message = "–ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        
        return jsonify({'error': error_message}), 500

@app.route('/api/stream', methods=['POST'])
def get_stream():
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–ø–∏—Ç –º—ñ—Å—Ç–∏—Ç—å JSON
        if not request.is_json:
            return jsonify({'error': '–ó–∞–ø–∏—Ç –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ JSON –¥–∞–Ω—ñ'}), 400
            
        data = request.get_json()
        if not data:
            return jsonify({'error': '–ü–æ—Ä–æ–∂–Ω—ñ–π JSON –∑–∞–ø–∏—Ç'}), 400
            
        url = data.get('url')
        translation = data.get('translation')
        season = data.get('season')
        episode = data.get('episode')
        
        if not url or not translation:
            return jsonify({'error': 'URL —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥ —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º–∏'}), 400
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä API
        rezka = HdRezkaApi(url)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç—Ä—ñ–º
        stream = rezka.getStream(season, episode, translation)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–∏ –¥–∞–Ω—ñ
        if not stream or not hasattr(stream, 'videos'):
            return jsonify({'error': '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç—Ä—ñ–º'}), 404
        
        result = {
            'videos': stream.videos,
            'season': stream.season,
            'episode': stream.episode
        }
        
        return jsonify(result)
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç—Ä—ñ–º—É: {str(e)}")
        print(traceback.format_exc())
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    import os
    
    # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    logger.info(f"Python –≤–µ—Ä—Å—ñ—è: {sys.version}")
    logger.info(f"–ü–æ—Ç–æ—á–Ω–∏–π —Ä–æ–±–æ—á–∏–π –∫–∞—Ç–∞–ª–æ–≥: {os.getcwd()}")
    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞: {list(os.environ.keys())}")
    
    port = int(os.environ.get('PORT', 5001))
    logger.info(f"–ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É: {port}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
    try:
        import flask
        import requests
        import bs4
        logger.info("–í—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ")
    except ImportError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
        sys.exit(1)
    
    app.run(debug=False, host='0.0.0.0', port=port)